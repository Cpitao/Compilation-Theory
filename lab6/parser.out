Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions_opt
Rule 2     instructions_opt -> instructions
Rule 3     instructions_opt -> <empty>
Rule 4     instructions -> instruction instructions
Rule 5     instructions -> instruction
Rule 6     instruction -> expression
Rule 7     instruction -> assignment ;
Rule 8     instruction -> ifexpr
Rule 9     instruction -> loop
Rule 10    instruction -> returnexpr ;
Rule 11    instruction -> printexpr ;
Rule 12    instruction -> breakOrContinue ;
Rule 13    instruction -> complexinstruction
Rule 14    breakOrContinue -> brk
Rule 15    breakOrContinue -> cnt
Rule 16    brk -> BREAK
Rule 17    cnt -> CONTINUE
Rule 18    complexinstruction -> { instructions }
Rule 19    assignment -> assignable = expression
Rule 20    assignment -> assignable ADDASSIGN expression
Rule 21    assignment -> assignable SUBASSIGN expression
Rule 22    assignment -> assignable MULASSIGN expression
Rule 23    assignment -> assignable DIVASSIGN expression
Rule 24    assignable -> ID
Rule 25    assignable -> ID [ expression , expression ]
Rule 26    expression -> binexp
Rule 27    expression -> transpose
Rule 28    expression -> num
Rule 29    expression -> assignable
Rule 30    expression -> str
Rule 31    expression -> special ( expression )
Rule 32    expression -> [ minit ]
Rule 33    expression -> ( expression )
Rule 34    expression -> - expression
Rule 35    str -> STRING
Rule 36    transpose -> expression '
Rule 37    num -> int
Rule 38    num -> float
Rule 39    int -> INTNUM
Rule 40    float -> FLOATNUM
Rule 41    binexp -> mutexp
Rule 42    binexp -> compexp
Rule 43    mutexp -> expression + expression
Rule 44    mutexp -> expression - expression
Rule 45    mutexp -> expression * expression
Rule 46    mutexp -> expression / expression
Rule 47    mutexp -> expression DOTADD expression
Rule 48    mutexp -> expression DOTSUB expression
Rule 49    mutexp -> expression DOTMUL expression
Rule 50    mutexp -> expression DOTDIV expression
Rule 51    compexp -> expression LE expression
Rule 52    compexp -> expression GE expression
Rule 53    compexp -> expression EQ expression
Rule 54    compexp -> expression > expression
Rule 55    compexp -> expression < expression
Rule 56    compexp -> expression DIFF expression
Rule 57    special -> EYE
Rule 58    special -> ZEROS
Rule 59    special -> ONES
Rule 60    minit -> [ matrixcontents ] , minit
Rule 61    minit -> [ matrixcontents ]
Rule 62    minit -> matrixcontents
Rule 63    matrixcontents -> expression
Rule 64    matrixcontents -> expression , matrixcontents
Rule 65    ifexpr -> IF ( expression ) instruction
Rule 66    ifexpr -> IF ( expression ) instruction ELSE instruction
Rule 67    loop -> forloop
Rule 68    loop -> whileloop
Rule 69    forloop -> FOR ID = range instruction
Rule 70    whileloop -> WHILE ( expression ) instruction
Rule 71    range -> expression : expression
Rule 72    returnexpr -> RETURN expression
Rule 73    printexpr -> PRINT printable
Rule 74    printable -> expression
Rule 75    printable -> expression , printable

Terminals, with rules where they appear

'                    : 36
(                    : 31 33 65 66 70
)                    : 31 33 65 66 70
*                    : 45
+                    : 43
,                    : 25 60 64 75
-                    : 34 44
/                    : 46
:                    : 71
;                    : 7 10 11 12
<                    : 55
=                    : 19 69
>                    : 54
ADDASSIGN            : 20
BREAK                : 16
CONTINUE             : 17
DIFF                 : 56
DIVASSIGN            : 23
DOTADD               : 47
DOTDIV               : 50
DOTMUL               : 49
DOTSUB               : 48
ELSE                 : 66
EQ                   : 53
EYE                  : 57
FLOATNUM             : 40
FOR                  : 69
GE                   : 52
ID                   : 24 25 69
IF                   : 65 66
INTNUM               : 39
LE                   : 51
MULASSIGN            : 22
ONES                 : 59
PRINT                : 73
RETURN               : 72
STRING               : 35
SUBASSIGN            : 21
WHILE                : 70
ZEROS                : 58
[                    : 25 32 60 61
]                    : 25 32 60 61
error                : 
{                    : 18
}                    : 18

Nonterminals, with rules where they appear

assignable           : 19 20 21 22 23 29
assignment           : 7
binexp               : 26
breakOrContinue      : 12
brk                  : 14
cnt                  : 15
compexp              : 42
complexinstruction   : 13
expression           : 6 19 20 21 22 23 25 25 31 33 34 36 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 63 64 65 66 70 71 71 72 74 75
float                : 38
forloop              : 67
ifexpr               : 8
instruction          : 4 5 65 66 66 69 70
instructions         : 2 4 18
instructions_opt     : 1
int                  : 37
loop                 : 9
matrixcontents       : 60 61 62 64
minit                : 32 60
mutexp               : 41
num                  : 28
printable            : 73 75
printexpr            : 11
program              : 0
range                : 69
returnexpr           : 10
special              : 31
str                  : 30
transpose            : 27
whileloop            : 68

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions_opt
    (2) instructions_opt -> . instructions
    (3) instructions_opt -> .
    (4) instructions -> . instruction instructions
    (5) instructions -> . instruction
    (6) instruction -> . expression
    (7) instruction -> . assignment ;
    (8) instruction -> . ifexpr
    (9) instruction -> . loop
    (10) instruction -> . returnexpr ;
    (11) instruction -> . printexpr ;
    (12) instruction -> . breakOrContinue ;
    (13) instruction -> . complexinstruction
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (19) assignment -> . assignable = expression
    (20) assignment -> . assignable ADDASSIGN expression
    (21) assignment -> . assignable SUBASSIGN expression
    (22) assignment -> . assignable MULASSIGN expression
    (23) assignment -> . assignable DIVASSIGN expression
    (65) ifexpr -> . IF ( expression ) instruction
    (66) ifexpr -> . IF ( expression ) instruction ELSE instruction
    (67) loop -> . forloop
    (68) loop -> . whileloop
    (72) returnexpr -> . RETURN expression
    (73) printexpr -> . PRINT printable
    (14) breakOrContinue -> . brk
    (15) breakOrContinue -> . cnt
    (18) complexinstruction -> . { instructions }
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (69) forloop -> . FOR ID = range instruction
    (70) whileloop -> . WHILE ( expression ) instruction
    (16) brk -> . BREAK
    (17) cnt -> . CONTINUE
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    $end            reduce using rule 3 (instructions_opt -> .)
    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    IF              shift and go to state 22
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    {               shift and go to state 29
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    FOR             shift and go to state 39
    WHILE           shift and go to state 40
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    program                        shift and go to state 1
    instructions_opt               shift and go to state 2
    instructions                   shift and go to state 3
    instruction                    shift and go to state 4
    expression                     shift and go to state 5
    assignment                     shift and go to state 6
    ifexpr                         shift and go to state 7
    loop                           shift and go to state 8
    returnexpr                     shift and go to state 9
    printexpr                      shift and go to state 10
    breakOrContinue                shift and go to state 11
    complexinstruction             shift and go to state 12
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 16
    str                            shift and go to state 17
    special                        shift and go to state 18
    forloop                        shift and go to state 23
    whileloop                      shift and go to state 24
    brk                            shift and go to state 27
    cnt                            shift and go to state 28
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions_opt .

    $end            reduce using rule 1 (program -> instructions_opt .)


state 3

    (2) instructions_opt -> instructions .

    $end            reduce using rule 2 (instructions_opt -> instructions .)


state 4

    (4) instructions -> instruction . instructions
    (5) instructions -> instruction .
    (4) instructions -> . instruction instructions
    (5) instructions -> . instruction
    (6) instruction -> . expression
    (7) instruction -> . assignment ;
    (8) instruction -> . ifexpr
    (9) instruction -> . loop
    (10) instruction -> . returnexpr ;
    (11) instruction -> . printexpr ;
    (12) instruction -> . breakOrContinue ;
    (13) instruction -> . complexinstruction
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (19) assignment -> . assignable = expression
    (20) assignment -> . assignable ADDASSIGN expression
    (21) assignment -> . assignable SUBASSIGN expression
    (22) assignment -> . assignable MULASSIGN expression
    (23) assignment -> . assignable DIVASSIGN expression
    (65) ifexpr -> . IF ( expression ) instruction
    (66) ifexpr -> . IF ( expression ) instruction ELSE instruction
    (67) loop -> . forloop
    (68) loop -> . whileloop
    (72) returnexpr -> . RETURN expression
    (73) printexpr -> . PRINT printable
    (14) breakOrContinue -> . brk
    (15) breakOrContinue -> . cnt
    (18) complexinstruction -> . { instructions }
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (69) forloop -> . FOR ID = range instruction
    (70) whileloop -> . WHILE ( expression ) instruction
    (16) brk -> . BREAK
    (17) cnt -> . CONTINUE
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    $end            reduce using rule 5 (instructions -> instruction .)
    }               reduce using rule 5 (instructions -> instruction .)
    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    IF              shift and go to state 22
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    {               shift and go to state 29
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    FOR             shift and go to state 39
    WHILE           shift and go to state 40
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    instruction                    shift and go to state 4
    instructions                   shift and go to state 45
    expression                     shift and go to state 5
    assignment                     shift and go to state 6
    ifexpr                         shift and go to state 7
    loop                           shift and go to state 8
    returnexpr                     shift and go to state 9
    printexpr                      shift and go to state 10
    breakOrContinue                shift and go to state 11
    complexinstruction             shift and go to state 12
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 16
    str                            shift and go to state 17
    special                        shift and go to state 18
    forloop                        shift and go to state 23
    whileloop                      shift and go to state 24
    brk                            shift and go to state 27
    cnt                            shift and go to state 28
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 5

    (6) instruction -> expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

  ! shift/reduce conflict for - resolved as shift
    [               reduce using rule 6 (instruction -> expression .)
    (               reduce using rule 6 (instruction -> expression .)
    IF              reduce using rule 6 (instruction -> expression .)
    RETURN          reduce using rule 6 (instruction -> expression .)
    PRINT           reduce using rule 6 (instruction -> expression .)
    {               reduce using rule 6 (instruction -> expression .)
    ID              reduce using rule 6 (instruction -> expression .)
    STRING          reduce using rule 6 (instruction -> expression .)
    EYE             reduce using rule 6 (instruction -> expression .)
    ZEROS           reduce using rule 6 (instruction -> expression .)
    ONES            reduce using rule 6 (instruction -> expression .)
    FOR             reduce using rule 6 (instruction -> expression .)
    WHILE           reduce using rule 6 (instruction -> expression .)
    BREAK           reduce using rule 6 (instruction -> expression .)
    CONTINUE        reduce using rule 6 (instruction -> expression .)
    INTNUM          reduce using rule 6 (instruction -> expression .)
    FLOATNUM        reduce using rule 6 (instruction -> expression .)
    $end            reduce using rule 6 (instruction -> expression .)
    }               reduce using rule 6 (instruction -> expression .)
    ELSE            reduce using rule 6 (instruction -> expression .)
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60

  ! -               [ reduce using rule 6 (instruction -> expression .) ]


state 6

    (7) instruction -> assignment . ;

    ;               shift and go to state 61


state 7

    (8) instruction -> ifexpr .

    [               reduce using rule 8 (instruction -> ifexpr .)
    (               reduce using rule 8 (instruction -> ifexpr .)
    -               reduce using rule 8 (instruction -> ifexpr .)
    IF              reduce using rule 8 (instruction -> ifexpr .)
    RETURN          reduce using rule 8 (instruction -> ifexpr .)
    PRINT           reduce using rule 8 (instruction -> ifexpr .)
    {               reduce using rule 8 (instruction -> ifexpr .)
    ID              reduce using rule 8 (instruction -> ifexpr .)
    STRING          reduce using rule 8 (instruction -> ifexpr .)
    EYE             reduce using rule 8 (instruction -> ifexpr .)
    ZEROS           reduce using rule 8 (instruction -> ifexpr .)
    ONES            reduce using rule 8 (instruction -> ifexpr .)
    FOR             reduce using rule 8 (instruction -> ifexpr .)
    WHILE           reduce using rule 8 (instruction -> ifexpr .)
    BREAK           reduce using rule 8 (instruction -> ifexpr .)
    CONTINUE        reduce using rule 8 (instruction -> ifexpr .)
    INTNUM          reduce using rule 8 (instruction -> ifexpr .)
    FLOATNUM        reduce using rule 8 (instruction -> ifexpr .)
    $end            reduce using rule 8 (instruction -> ifexpr .)
    }               reduce using rule 8 (instruction -> ifexpr .)
    ELSE            reduce using rule 8 (instruction -> ifexpr .)


state 8

    (9) instruction -> loop .

    [               reduce using rule 9 (instruction -> loop .)
    (               reduce using rule 9 (instruction -> loop .)
    -               reduce using rule 9 (instruction -> loop .)
    IF              reduce using rule 9 (instruction -> loop .)
    RETURN          reduce using rule 9 (instruction -> loop .)
    PRINT           reduce using rule 9 (instruction -> loop .)
    {               reduce using rule 9 (instruction -> loop .)
    ID              reduce using rule 9 (instruction -> loop .)
    STRING          reduce using rule 9 (instruction -> loop .)
    EYE             reduce using rule 9 (instruction -> loop .)
    ZEROS           reduce using rule 9 (instruction -> loop .)
    ONES            reduce using rule 9 (instruction -> loop .)
    FOR             reduce using rule 9 (instruction -> loop .)
    WHILE           reduce using rule 9 (instruction -> loop .)
    BREAK           reduce using rule 9 (instruction -> loop .)
    CONTINUE        reduce using rule 9 (instruction -> loop .)
    INTNUM          reduce using rule 9 (instruction -> loop .)
    FLOATNUM        reduce using rule 9 (instruction -> loop .)
    $end            reduce using rule 9 (instruction -> loop .)
    }               reduce using rule 9 (instruction -> loop .)
    ELSE            reduce using rule 9 (instruction -> loop .)


state 9

    (10) instruction -> returnexpr . ;

    ;               shift and go to state 62


state 10

    (11) instruction -> printexpr . ;

    ;               shift and go to state 63


state 11

    (12) instruction -> breakOrContinue . ;

    ;               shift and go to state 64


state 12

    (13) instruction -> complexinstruction .

    [               reduce using rule 13 (instruction -> complexinstruction .)
    (               reduce using rule 13 (instruction -> complexinstruction .)
    -               reduce using rule 13 (instruction -> complexinstruction .)
    IF              reduce using rule 13 (instruction -> complexinstruction .)
    RETURN          reduce using rule 13 (instruction -> complexinstruction .)
    PRINT           reduce using rule 13 (instruction -> complexinstruction .)
    {               reduce using rule 13 (instruction -> complexinstruction .)
    ID              reduce using rule 13 (instruction -> complexinstruction .)
    STRING          reduce using rule 13 (instruction -> complexinstruction .)
    EYE             reduce using rule 13 (instruction -> complexinstruction .)
    ZEROS           reduce using rule 13 (instruction -> complexinstruction .)
    ONES            reduce using rule 13 (instruction -> complexinstruction .)
    FOR             reduce using rule 13 (instruction -> complexinstruction .)
    WHILE           reduce using rule 13 (instruction -> complexinstruction .)
    BREAK           reduce using rule 13 (instruction -> complexinstruction .)
    CONTINUE        reduce using rule 13 (instruction -> complexinstruction .)
    INTNUM          reduce using rule 13 (instruction -> complexinstruction .)
    FLOATNUM        reduce using rule 13 (instruction -> complexinstruction .)
    $end            reduce using rule 13 (instruction -> complexinstruction .)
    }               reduce using rule 13 (instruction -> complexinstruction .)
    ELSE            reduce using rule 13 (instruction -> complexinstruction .)


state 13

    (26) expression -> binexp .

    '               reduce using rule 26 (expression -> binexp .)
    +               reduce using rule 26 (expression -> binexp .)
    -               reduce using rule 26 (expression -> binexp .)
    *               reduce using rule 26 (expression -> binexp .)
    /               reduce using rule 26 (expression -> binexp .)
    DOTADD          reduce using rule 26 (expression -> binexp .)
    DOTSUB          reduce using rule 26 (expression -> binexp .)
    DOTMUL          reduce using rule 26 (expression -> binexp .)
    DOTDIV          reduce using rule 26 (expression -> binexp .)
    LE              reduce using rule 26 (expression -> binexp .)
    GE              reduce using rule 26 (expression -> binexp .)
    EQ              reduce using rule 26 (expression -> binexp .)
    >               reduce using rule 26 (expression -> binexp .)
    <               reduce using rule 26 (expression -> binexp .)
    DIFF            reduce using rule 26 (expression -> binexp .)
    [               reduce using rule 26 (expression -> binexp .)
    (               reduce using rule 26 (expression -> binexp .)
    IF              reduce using rule 26 (expression -> binexp .)
    RETURN          reduce using rule 26 (expression -> binexp .)
    PRINT           reduce using rule 26 (expression -> binexp .)
    {               reduce using rule 26 (expression -> binexp .)
    ID              reduce using rule 26 (expression -> binexp .)
    STRING          reduce using rule 26 (expression -> binexp .)
    EYE             reduce using rule 26 (expression -> binexp .)
    ZEROS           reduce using rule 26 (expression -> binexp .)
    ONES            reduce using rule 26 (expression -> binexp .)
    FOR             reduce using rule 26 (expression -> binexp .)
    WHILE           reduce using rule 26 (expression -> binexp .)
    BREAK           reduce using rule 26 (expression -> binexp .)
    CONTINUE        reduce using rule 26 (expression -> binexp .)
    INTNUM          reduce using rule 26 (expression -> binexp .)
    FLOATNUM        reduce using rule 26 (expression -> binexp .)
    $end            reduce using rule 26 (expression -> binexp .)
    }               reduce using rule 26 (expression -> binexp .)
    )               reduce using rule 26 (expression -> binexp .)
    ,               reduce using rule 26 (expression -> binexp .)
    ]               reduce using rule 26 (expression -> binexp .)
    ;               reduce using rule 26 (expression -> binexp .)
    :               reduce using rule 26 (expression -> binexp .)
    ELSE            reduce using rule 26 (expression -> binexp .)


state 14

    (27) expression -> transpose .

    '               reduce using rule 27 (expression -> transpose .)
    +               reduce using rule 27 (expression -> transpose .)
    -               reduce using rule 27 (expression -> transpose .)
    *               reduce using rule 27 (expression -> transpose .)
    /               reduce using rule 27 (expression -> transpose .)
    DOTADD          reduce using rule 27 (expression -> transpose .)
    DOTSUB          reduce using rule 27 (expression -> transpose .)
    DOTMUL          reduce using rule 27 (expression -> transpose .)
    DOTDIV          reduce using rule 27 (expression -> transpose .)
    LE              reduce using rule 27 (expression -> transpose .)
    GE              reduce using rule 27 (expression -> transpose .)
    EQ              reduce using rule 27 (expression -> transpose .)
    >               reduce using rule 27 (expression -> transpose .)
    <               reduce using rule 27 (expression -> transpose .)
    DIFF            reduce using rule 27 (expression -> transpose .)
    [               reduce using rule 27 (expression -> transpose .)
    (               reduce using rule 27 (expression -> transpose .)
    IF              reduce using rule 27 (expression -> transpose .)
    RETURN          reduce using rule 27 (expression -> transpose .)
    PRINT           reduce using rule 27 (expression -> transpose .)
    {               reduce using rule 27 (expression -> transpose .)
    ID              reduce using rule 27 (expression -> transpose .)
    STRING          reduce using rule 27 (expression -> transpose .)
    EYE             reduce using rule 27 (expression -> transpose .)
    ZEROS           reduce using rule 27 (expression -> transpose .)
    ONES            reduce using rule 27 (expression -> transpose .)
    FOR             reduce using rule 27 (expression -> transpose .)
    WHILE           reduce using rule 27 (expression -> transpose .)
    BREAK           reduce using rule 27 (expression -> transpose .)
    CONTINUE        reduce using rule 27 (expression -> transpose .)
    INTNUM          reduce using rule 27 (expression -> transpose .)
    FLOATNUM        reduce using rule 27 (expression -> transpose .)
    $end            reduce using rule 27 (expression -> transpose .)
    }               reduce using rule 27 (expression -> transpose .)
    )               reduce using rule 27 (expression -> transpose .)
    ,               reduce using rule 27 (expression -> transpose .)
    ]               reduce using rule 27 (expression -> transpose .)
    ;               reduce using rule 27 (expression -> transpose .)
    :               reduce using rule 27 (expression -> transpose .)
    ELSE            reduce using rule 27 (expression -> transpose .)


state 15

    (28) expression -> num .

    '               reduce using rule 28 (expression -> num .)
    +               reduce using rule 28 (expression -> num .)
    -               reduce using rule 28 (expression -> num .)
    *               reduce using rule 28 (expression -> num .)
    /               reduce using rule 28 (expression -> num .)
    DOTADD          reduce using rule 28 (expression -> num .)
    DOTSUB          reduce using rule 28 (expression -> num .)
    DOTMUL          reduce using rule 28 (expression -> num .)
    DOTDIV          reduce using rule 28 (expression -> num .)
    LE              reduce using rule 28 (expression -> num .)
    GE              reduce using rule 28 (expression -> num .)
    EQ              reduce using rule 28 (expression -> num .)
    >               reduce using rule 28 (expression -> num .)
    <               reduce using rule 28 (expression -> num .)
    DIFF            reduce using rule 28 (expression -> num .)
    [               reduce using rule 28 (expression -> num .)
    (               reduce using rule 28 (expression -> num .)
    IF              reduce using rule 28 (expression -> num .)
    RETURN          reduce using rule 28 (expression -> num .)
    PRINT           reduce using rule 28 (expression -> num .)
    {               reduce using rule 28 (expression -> num .)
    ID              reduce using rule 28 (expression -> num .)
    STRING          reduce using rule 28 (expression -> num .)
    EYE             reduce using rule 28 (expression -> num .)
    ZEROS           reduce using rule 28 (expression -> num .)
    ONES            reduce using rule 28 (expression -> num .)
    FOR             reduce using rule 28 (expression -> num .)
    WHILE           reduce using rule 28 (expression -> num .)
    BREAK           reduce using rule 28 (expression -> num .)
    CONTINUE        reduce using rule 28 (expression -> num .)
    INTNUM          reduce using rule 28 (expression -> num .)
    FLOATNUM        reduce using rule 28 (expression -> num .)
    $end            reduce using rule 28 (expression -> num .)
    }               reduce using rule 28 (expression -> num .)
    )               reduce using rule 28 (expression -> num .)
    ,               reduce using rule 28 (expression -> num .)
    ]               reduce using rule 28 (expression -> num .)
    ;               reduce using rule 28 (expression -> num .)
    :               reduce using rule 28 (expression -> num .)
    ELSE            reduce using rule 28 (expression -> num .)


state 16

    (29) expression -> assignable .
    (19) assignment -> assignable . = expression
    (20) assignment -> assignable . ADDASSIGN expression
    (21) assignment -> assignable . SUBASSIGN expression
    (22) assignment -> assignable . MULASSIGN expression
    (23) assignment -> assignable . DIVASSIGN expression

    '               reduce using rule 29 (expression -> assignable .)
    +               reduce using rule 29 (expression -> assignable .)
    -               reduce using rule 29 (expression -> assignable .)
    *               reduce using rule 29 (expression -> assignable .)
    /               reduce using rule 29 (expression -> assignable .)
    DOTADD          reduce using rule 29 (expression -> assignable .)
    DOTSUB          reduce using rule 29 (expression -> assignable .)
    DOTMUL          reduce using rule 29 (expression -> assignable .)
    DOTDIV          reduce using rule 29 (expression -> assignable .)
    LE              reduce using rule 29 (expression -> assignable .)
    GE              reduce using rule 29 (expression -> assignable .)
    EQ              reduce using rule 29 (expression -> assignable .)
    >               reduce using rule 29 (expression -> assignable .)
    <               reduce using rule 29 (expression -> assignable .)
    DIFF            reduce using rule 29 (expression -> assignable .)
    [               reduce using rule 29 (expression -> assignable .)
    (               reduce using rule 29 (expression -> assignable .)
    IF              reduce using rule 29 (expression -> assignable .)
    RETURN          reduce using rule 29 (expression -> assignable .)
    PRINT           reduce using rule 29 (expression -> assignable .)
    {               reduce using rule 29 (expression -> assignable .)
    ID              reduce using rule 29 (expression -> assignable .)
    STRING          reduce using rule 29 (expression -> assignable .)
    EYE             reduce using rule 29 (expression -> assignable .)
    ZEROS           reduce using rule 29 (expression -> assignable .)
    ONES            reduce using rule 29 (expression -> assignable .)
    FOR             reduce using rule 29 (expression -> assignable .)
    WHILE           reduce using rule 29 (expression -> assignable .)
    BREAK           reduce using rule 29 (expression -> assignable .)
    CONTINUE        reduce using rule 29 (expression -> assignable .)
    INTNUM          reduce using rule 29 (expression -> assignable .)
    FLOATNUM        reduce using rule 29 (expression -> assignable .)
    $end            reduce using rule 29 (expression -> assignable .)
    }               reduce using rule 29 (expression -> assignable .)
    ELSE            reduce using rule 29 (expression -> assignable .)
    =               shift and go to state 65
    ADDASSIGN       shift and go to state 66
    SUBASSIGN       shift and go to state 67
    MULASSIGN       shift and go to state 68
    DIVASSIGN       shift and go to state 69


state 17

    (30) expression -> str .

    '               reduce using rule 30 (expression -> str .)
    +               reduce using rule 30 (expression -> str .)
    -               reduce using rule 30 (expression -> str .)
    *               reduce using rule 30 (expression -> str .)
    /               reduce using rule 30 (expression -> str .)
    DOTADD          reduce using rule 30 (expression -> str .)
    DOTSUB          reduce using rule 30 (expression -> str .)
    DOTMUL          reduce using rule 30 (expression -> str .)
    DOTDIV          reduce using rule 30 (expression -> str .)
    LE              reduce using rule 30 (expression -> str .)
    GE              reduce using rule 30 (expression -> str .)
    EQ              reduce using rule 30 (expression -> str .)
    >               reduce using rule 30 (expression -> str .)
    <               reduce using rule 30 (expression -> str .)
    DIFF            reduce using rule 30 (expression -> str .)
    [               reduce using rule 30 (expression -> str .)
    (               reduce using rule 30 (expression -> str .)
    IF              reduce using rule 30 (expression -> str .)
    RETURN          reduce using rule 30 (expression -> str .)
    PRINT           reduce using rule 30 (expression -> str .)
    {               reduce using rule 30 (expression -> str .)
    ID              reduce using rule 30 (expression -> str .)
    STRING          reduce using rule 30 (expression -> str .)
    EYE             reduce using rule 30 (expression -> str .)
    ZEROS           reduce using rule 30 (expression -> str .)
    ONES            reduce using rule 30 (expression -> str .)
    FOR             reduce using rule 30 (expression -> str .)
    WHILE           reduce using rule 30 (expression -> str .)
    BREAK           reduce using rule 30 (expression -> str .)
    CONTINUE        reduce using rule 30 (expression -> str .)
    INTNUM          reduce using rule 30 (expression -> str .)
    FLOATNUM        reduce using rule 30 (expression -> str .)
    $end            reduce using rule 30 (expression -> str .)
    }               reduce using rule 30 (expression -> str .)
    )               reduce using rule 30 (expression -> str .)
    ,               reduce using rule 30 (expression -> str .)
    ]               reduce using rule 30 (expression -> str .)
    ;               reduce using rule 30 (expression -> str .)
    :               reduce using rule 30 (expression -> str .)
    ELSE            reduce using rule 30 (expression -> str .)


state 18

    (31) expression -> special . ( expression )

    (               shift and go to state 70


state 19

    (33) expression -> ( . expression )
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 71
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 20

    (32) expression -> [ . minit ]
    (60) minit -> . [ matrixcontents ] , minit
    (61) minit -> . [ matrixcontents ]
    (62) minit -> . matrixcontents
    (63) matrixcontents -> . expression
    (64) matrixcontents -> . expression , matrixcontents
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 73
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    minit                          shift and go to state 74
    matrixcontents                 shift and go to state 75
    expression                     shift and go to state 76
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 21

    (34) expression -> - . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 77
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 22

    (65) ifexpr -> IF . ( expression ) instruction
    (66) ifexpr -> IF . ( expression ) instruction ELSE instruction

    (               shift and go to state 78


state 23

    (67) loop -> forloop .

    [               reduce using rule 67 (loop -> forloop .)
    (               reduce using rule 67 (loop -> forloop .)
    -               reduce using rule 67 (loop -> forloop .)
    IF              reduce using rule 67 (loop -> forloop .)
    RETURN          reduce using rule 67 (loop -> forloop .)
    PRINT           reduce using rule 67 (loop -> forloop .)
    {               reduce using rule 67 (loop -> forloop .)
    ID              reduce using rule 67 (loop -> forloop .)
    STRING          reduce using rule 67 (loop -> forloop .)
    EYE             reduce using rule 67 (loop -> forloop .)
    ZEROS           reduce using rule 67 (loop -> forloop .)
    ONES            reduce using rule 67 (loop -> forloop .)
    FOR             reduce using rule 67 (loop -> forloop .)
    WHILE           reduce using rule 67 (loop -> forloop .)
    BREAK           reduce using rule 67 (loop -> forloop .)
    CONTINUE        reduce using rule 67 (loop -> forloop .)
    INTNUM          reduce using rule 67 (loop -> forloop .)
    FLOATNUM        reduce using rule 67 (loop -> forloop .)
    $end            reduce using rule 67 (loop -> forloop .)
    }               reduce using rule 67 (loop -> forloop .)
    ELSE            reduce using rule 67 (loop -> forloop .)


state 24

    (68) loop -> whileloop .

    [               reduce using rule 68 (loop -> whileloop .)
    (               reduce using rule 68 (loop -> whileloop .)
    -               reduce using rule 68 (loop -> whileloop .)
    IF              reduce using rule 68 (loop -> whileloop .)
    RETURN          reduce using rule 68 (loop -> whileloop .)
    PRINT           reduce using rule 68 (loop -> whileloop .)
    {               reduce using rule 68 (loop -> whileloop .)
    ID              reduce using rule 68 (loop -> whileloop .)
    STRING          reduce using rule 68 (loop -> whileloop .)
    EYE             reduce using rule 68 (loop -> whileloop .)
    ZEROS           reduce using rule 68 (loop -> whileloop .)
    ONES            reduce using rule 68 (loop -> whileloop .)
    FOR             reduce using rule 68 (loop -> whileloop .)
    WHILE           reduce using rule 68 (loop -> whileloop .)
    BREAK           reduce using rule 68 (loop -> whileloop .)
    CONTINUE        reduce using rule 68 (loop -> whileloop .)
    INTNUM          reduce using rule 68 (loop -> whileloop .)
    FLOATNUM        reduce using rule 68 (loop -> whileloop .)
    $end            reduce using rule 68 (loop -> whileloop .)
    }               reduce using rule 68 (loop -> whileloop .)
    ELSE            reduce using rule 68 (loop -> whileloop .)


state 25

    (72) returnexpr -> RETURN . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 79
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 26

    (73) printexpr -> PRINT . printable
    (74) printable -> . expression
    (75) printable -> . expression , printable
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    printable                      shift and go to state 80
    expression                     shift and go to state 81
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 27

    (14) breakOrContinue -> brk .

    ;               reduce using rule 14 (breakOrContinue -> brk .)


state 28

    (15) breakOrContinue -> cnt .

    ;               reduce using rule 15 (breakOrContinue -> cnt .)


state 29

    (18) complexinstruction -> { . instructions }
    (4) instructions -> . instruction instructions
    (5) instructions -> . instruction
    (6) instruction -> . expression
    (7) instruction -> . assignment ;
    (8) instruction -> . ifexpr
    (9) instruction -> . loop
    (10) instruction -> . returnexpr ;
    (11) instruction -> . printexpr ;
    (12) instruction -> . breakOrContinue ;
    (13) instruction -> . complexinstruction
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (19) assignment -> . assignable = expression
    (20) assignment -> . assignable ADDASSIGN expression
    (21) assignment -> . assignable SUBASSIGN expression
    (22) assignment -> . assignable MULASSIGN expression
    (23) assignment -> . assignable DIVASSIGN expression
    (65) ifexpr -> . IF ( expression ) instruction
    (66) ifexpr -> . IF ( expression ) instruction ELSE instruction
    (67) loop -> . forloop
    (68) loop -> . whileloop
    (72) returnexpr -> . RETURN expression
    (73) printexpr -> . PRINT printable
    (14) breakOrContinue -> . brk
    (15) breakOrContinue -> . cnt
    (18) complexinstruction -> . { instructions }
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (69) forloop -> . FOR ID = range instruction
    (70) whileloop -> . WHILE ( expression ) instruction
    (16) brk -> . BREAK
    (17) cnt -> . CONTINUE
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    IF              shift and go to state 22
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    {               shift and go to state 29
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    FOR             shift and go to state 39
    WHILE           shift and go to state 40
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    instructions                   shift and go to state 82
    instruction                    shift and go to state 4
    expression                     shift and go to state 5
    assignment                     shift and go to state 6
    ifexpr                         shift and go to state 7
    loop                           shift and go to state 8
    returnexpr                     shift and go to state 9
    printexpr                      shift and go to state 10
    breakOrContinue                shift and go to state 11
    complexinstruction             shift and go to state 12
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 16
    str                            shift and go to state 17
    special                        shift and go to state 18
    forloop                        shift and go to state 23
    whileloop                      shift and go to state 24
    brk                            shift and go to state 27
    cnt                            shift and go to state 28
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 30

    (41) binexp -> mutexp .

    '               reduce using rule 41 (binexp -> mutexp .)
    +               reduce using rule 41 (binexp -> mutexp .)
    -               reduce using rule 41 (binexp -> mutexp .)
    *               reduce using rule 41 (binexp -> mutexp .)
    /               reduce using rule 41 (binexp -> mutexp .)
    DOTADD          reduce using rule 41 (binexp -> mutexp .)
    DOTSUB          reduce using rule 41 (binexp -> mutexp .)
    DOTMUL          reduce using rule 41 (binexp -> mutexp .)
    DOTDIV          reduce using rule 41 (binexp -> mutexp .)
    LE              reduce using rule 41 (binexp -> mutexp .)
    GE              reduce using rule 41 (binexp -> mutexp .)
    EQ              reduce using rule 41 (binexp -> mutexp .)
    >               reduce using rule 41 (binexp -> mutexp .)
    <               reduce using rule 41 (binexp -> mutexp .)
    DIFF            reduce using rule 41 (binexp -> mutexp .)
    [               reduce using rule 41 (binexp -> mutexp .)
    (               reduce using rule 41 (binexp -> mutexp .)
    IF              reduce using rule 41 (binexp -> mutexp .)
    RETURN          reduce using rule 41 (binexp -> mutexp .)
    PRINT           reduce using rule 41 (binexp -> mutexp .)
    {               reduce using rule 41 (binexp -> mutexp .)
    ID              reduce using rule 41 (binexp -> mutexp .)
    STRING          reduce using rule 41 (binexp -> mutexp .)
    EYE             reduce using rule 41 (binexp -> mutexp .)
    ZEROS           reduce using rule 41 (binexp -> mutexp .)
    ONES            reduce using rule 41 (binexp -> mutexp .)
    FOR             reduce using rule 41 (binexp -> mutexp .)
    WHILE           reduce using rule 41 (binexp -> mutexp .)
    BREAK           reduce using rule 41 (binexp -> mutexp .)
    CONTINUE        reduce using rule 41 (binexp -> mutexp .)
    INTNUM          reduce using rule 41 (binexp -> mutexp .)
    FLOATNUM        reduce using rule 41 (binexp -> mutexp .)
    $end            reduce using rule 41 (binexp -> mutexp .)
    }               reduce using rule 41 (binexp -> mutexp .)
    )               reduce using rule 41 (binexp -> mutexp .)
    ,               reduce using rule 41 (binexp -> mutexp .)
    ]               reduce using rule 41 (binexp -> mutexp .)
    ;               reduce using rule 41 (binexp -> mutexp .)
    :               reduce using rule 41 (binexp -> mutexp .)
    ELSE            reduce using rule 41 (binexp -> mutexp .)


state 31

    (42) binexp -> compexp .

    '               reduce using rule 42 (binexp -> compexp .)
    +               reduce using rule 42 (binexp -> compexp .)
    -               reduce using rule 42 (binexp -> compexp .)
    *               reduce using rule 42 (binexp -> compexp .)
    /               reduce using rule 42 (binexp -> compexp .)
    DOTADD          reduce using rule 42 (binexp -> compexp .)
    DOTSUB          reduce using rule 42 (binexp -> compexp .)
    DOTMUL          reduce using rule 42 (binexp -> compexp .)
    DOTDIV          reduce using rule 42 (binexp -> compexp .)
    LE              reduce using rule 42 (binexp -> compexp .)
    GE              reduce using rule 42 (binexp -> compexp .)
    EQ              reduce using rule 42 (binexp -> compexp .)
    >               reduce using rule 42 (binexp -> compexp .)
    <               reduce using rule 42 (binexp -> compexp .)
    DIFF            reduce using rule 42 (binexp -> compexp .)
    [               reduce using rule 42 (binexp -> compexp .)
    (               reduce using rule 42 (binexp -> compexp .)
    IF              reduce using rule 42 (binexp -> compexp .)
    RETURN          reduce using rule 42 (binexp -> compexp .)
    PRINT           reduce using rule 42 (binexp -> compexp .)
    {               reduce using rule 42 (binexp -> compexp .)
    ID              reduce using rule 42 (binexp -> compexp .)
    STRING          reduce using rule 42 (binexp -> compexp .)
    EYE             reduce using rule 42 (binexp -> compexp .)
    ZEROS           reduce using rule 42 (binexp -> compexp .)
    ONES            reduce using rule 42 (binexp -> compexp .)
    FOR             reduce using rule 42 (binexp -> compexp .)
    WHILE           reduce using rule 42 (binexp -> compexp .)
    BREAK           reduce using rule 42 (binexp -> compexp .)
    CONTINUE        reduce using rule 42 (binexp -> compexp .)
    INTNUM          reduce using rule 42 (binexp -> compexp .)
    FLOATNUM        reduce using rule 42 (binexp -> compexp .)
    $end            reduce using rule 42 (binexp -> compexp .)
    }               reduce using rule 42 (binexp -> compexp .)
    )               reduce using rule 42 (binexp -> compexp .)
    ,               reduce using rule 42 (binexp -> compexp .)
    ]               reduce using rule 42 (binexp -> compexp .)
    ;               reduce using rule 42 (binexp -> compexp .)
    :               reduce using rule 42 (binexp -> compexp .)
    ELSE            reduce using rule 42 (binexp -> compexp .)


state 32

    (37) num -> int .

    '               reduce using rule 37 (num -> int .)
    +               reduce using rule 37 (num -> int .)
    -               reduce using rule 37 (num -> int .)
    *               reduce using rule 37 (num -> int .)
    /               reduce using rule 37 (num -> int .)
    DOTADD          reduce using rule 37 (num -> int .)
    DOTSUB          reduce using rule 37 (num -> int .)
    DOTMUL          reduce using rule 37 (num -> int .)
    DOTDIV          reduce using rule 37 (num -> int .)
    LE              reduce using rule 37 (num -> int .)
    GE              reduce using rule 37 (num -> int .)
    EQ              reduce using rule 37 (num -> int .)
    >               reduce using rule 37 (num -> int .)
    <               reduce using rule 37 (num -> int .)
    DIFF            reduce using rule 37 (num -> int .)
    [               reduce using rule 37 (num -> int .)
    (               reduce using rule 37 (num -> int .)
    IF              reduce using rule 37 (num -> int .)
    RETURN          reduce using rule 37 (num -> int .)
    PRINT           reduce using rule 37 (num -> int .)
    {               reduce using rule 37 (num -> int .)
    ID              reduce using rule 37 (num -> int .)
    STRING          reduce using rule 37 (num -> int .)
    EYE             reduce using rule 37 (num -> int .)
    ZEROS           reduce using rule 37 (num -> int .)
    ONES            reduce using rule 37 (num -> int .)
    FOR             reduce using rule 37 (num -> int .)
    WHILE           reduce using rule 37 (num -> int .)
    BREAK           reduce using rule 37 (num -> int .)
    CONTINUE        reduce using rule 37 (num -> int .)
    INTNUM          reduce using rule 37 (num -> int .)
    FLOATNUM        reduce using rule 37 (num -> int .)
    $end            reduce using rule 37 (num -> int .)
    }               reduce using rule 37 (num -> int .)
    )               reduce using rule 37 (num -> int .)
    ,               reduce using rule 37 (num -> int .)
    ]               reduce using rule 37 (num -> int .)
    ;               reduce using rule 37 (num -> int .)
    :               reduce using rule 37 (num -> int .)
    ELSE            reduce using rule 37 (num -> int .)


state 33

    (38) num -> float .

    '               reduce using rule 38 (num -> float .)
    +               reduce using rule 38 (num -> float .)
    -               reduce using rule 38 (num -> float .)
    *               reduce using rule 38 (num -> float .)
    /               reduce using rule 38 (num -> float .)
    DOTADD          reduce using rule 38 (num -> float .)
    DOTSUB          reduce using rule 38 (num -> float .)
    DOTMUL          reduce using rule 38 (num -> float .)
    DOTDIV          reduce using rule 38 (num -> float .)
    LE              reduce using rule 38 (num -> float .)
    GE              reduce using rule 38 (num -> float .)
    EQ              reduce using rule 38 (num -> float .)
    >               reduce using rule 38 (num -> float .)
    <               reduce using rule 38 (num -> float .)
    DIFF            reduce using rule 38 (num -> float .)
    [               reduce using rule 38 (num -> float .)
    (               reduce using rule 38 (num -> float .)
    IF              reduce using rule 38 (num -> float .)
    RETURN          reduce using rule 38 (num -> float .)
    PRINT           reduce using rule 38 (num -> float .)
    {               reduce using rule 38 (num -> float .)
    ID              reduce using rule 38 (num -> float .)
    STRING          reduce using rule 38 (num -> float .)
    EYE             reduce using rule 38 (num -> float .)
    ZEROS           reduce using rule 38 (num -> float .)
    ONES            reduce using rule 38 (num -> float .)
    FOR             reduce using rule 38 (num -> float .)
    WHILE           reduce using rule 38 (num -> float .)
    BREAK           reduce using rule 38 (num -> float .)
    CONTINUE        reduce using rule 38 (num -> float .)
    INTNUM          reduce using rule 38 (num -> float .)
    FLOATNUM        reduce using rule 38 (num -> float .)
    $end            reduce using rule 38 (num -> float .)
    }               reduce using rule 38 (num -> float .)
    )               reduce using rule 38 (num -> float .)
    ,               reduce using rule 38 (num -> float .)
    ]               reduce using rule 38 (num -> float .)
    ;               reduce using rule 38 (num -> float .)
    :               reduce using rule 38 (num -> float .)
    ELSE            reduce using rule 38 (num -> float .)


state 34

    (24) assignable -> ID .
    (25) assignable -> ID . [ expression , expression ]

  ! shift/reduce conflict for [ resolved as shift
    =               reduce using rule 24 (assignable -> ID .)
    ADDASSIGN       reduce using rule 24 (assignable -> ID .)
    SUBASSIGN       reduce using rule 24 (assignable -> ID .)
    MULASSIGN       reduce using rule 24 (assignable -> ID .)
    DIVASSIGN       reduce using rule 24 (assignable -> ID .)
    '               reduce using rule 24 (assignable -> ID .)
    +               reduce using rule 24 (assignable -> ID .)
    -               reduce using rule 24 (assignable -> ID .)
    *               reduce using rule 24 (assignable -> ID .)
    /               reduce using rule 24 (assignable -> ID .)
    DOTADD          reduce using rule 24 (assignable -> ID .)
    DOTSUB          reduce using rule 24 (assignable -> ID .)
    DOTMUL          reduce using rule 24 (assignable -> ID .)
    DOTDIV          reduce using rule 24 (assignable -> ID .)
    LE              reduce using rule 24 (assignable -> ID .)
    GE              reduce using rule 24 (assignable -> ID .)
    EQ              reduce using rule 24 (assignable -> ID .)
    >               reduce using rule 24 (assignable -> ID .)
    <               reduce using rule 24 (assignable -> ID .)
    DIFF            reduce using rule 24 (assignable -> ID .)
    (               reduce using rule 24 (assignable -> ID .)
    IF              reduce using rule 24 (assignable -> ID .)
    RETURN          reduce using rule 24 (assignable -> ID .)
    PRINT           reduce using rule 24 (assignable -> ID .)
    {               reduce using rule 24 (assignable -> ID .)
    ID              reduce using rule 24 (assignable -> ID .)
    STRING          reduce using rule 24 (assignable -> ID .)
    EYE             reduce using rule 24 (assignable -> ID .)
    ZEROS           reduce using rule 24 (assignable -> ID .)
    ONES            reduce using rule 24 (assignable -> ID .)
    FOR             reduce using rule 24 (assignable -> ID .)
    WHILE           reduce using rule 24 (assignable -> ID .)
    BREAK           reduce using rule 24 (assignable -> ID .)
    CONTINUE        reduce using rule 24 (assignable -> ID .)
    INTNUM          reduce using rule 24 (assignable -> ID .)
    FLOATNUM        reduce using rule 24 (assignable -> ID .)
    $end            reduce using rule 24 (assignable -> ID .)
    }               reduce using rule 24 (assignable -> ID .)
    )               reduce using rule 24 (assignable -> ID .)
    ,               reduce using rule 24 (assignable -> ID .)
    ]               reduce using rule 24 (assignable -> ID .)
    ;               reduce using rule 24 (assignable -> ID .)
    :               reduce using rule 24 (assignable -> ID .)
    ELSE            reduce using rule 24 (assignable -> ID .)
    [               shift and go to state 83

  ! [               [ reduce using rule 24 (assignable -> ID .) ]


state 35

    (35) str -> STRING .

    '               reduce using rule 35 (str -> STRING .)
    +               reduce using rule 35 (str -> STRING .)
    -               reduce using rule 35 (str -> STRING .)
    *               reduce using rule 35 (str -> STRING .)
    /               reduce using rule 35 (str -> STRING .)
    DOTADD          reduce using rule 35 (str -> STRING .)
    DOTSUB          reduce using rule 35 (str -> STRING .)
    DOTMUL          reduce using rule 35 (str -> STRING .)
    DOTDIV          reduce using rule 35 (str -> STRING .)
    LE              reduce using rule 35 (str -> STRING .)
    GE              reduce using rule 35 (str -> STRING .)
    EQ              reduce using rule 35 (str -> STRING .)
    >               reduce using rule 35 (str -> STRING .)
    <               reduce using rule 35 (str -> STRING .)
    DIFF            reduce using rule 35 (str -> STRING .)
    [               reduce using rule 35 (str -> STRING .)
    (               reduce using rule 35 (str -> STRING .)
    IF              reduce using rule 35 (str -> STRING .)
    RETURN          reduce using rule 35 (str -> STRING .)
    PRINT           reduce using rule 35 (str -> STRING .)
    {               reduce using rule 35 (str -> STRING .)
    ID              reduce using rule 35 (str -> STRING .)
    STRING          reduce using rule 35 (str -> STRING .)
    EYE             reduce using rule 35 (str -> STRING .)
    ZEROS           reduce using rule 35 (str -> STRING .)
    ONES            reduce using rule 35 (str -> STRING .)
    FOR             reduce using rule 35 (str -> STRING .)
    WHILE           reduce using rule 35 (str -> STRING .)
    BREAK           reduce using rule 35 (str -> STRING .)
    CONTINUE        reduce using rule 35 (str -> STRING .)
    INTNUM          reduce using rule 35 (str -> STRING .)
    FLOATNUM        reduce using rule 35 (str -> STRING .)
    $end            reduce using rule 35 (str -> STRING .)
    }               reduce using rule 35 (str -> STRING .)
    )               reduce using rule 35 (str -> STRING .)
    ,               reduce using rule 35 (str -> STRING .)
    ]               reduce using rule 35 (str -> STRING .)
    ;               reduce using rule 35 (str -> STRING .)
    :               reduce using rule 35 (str -> STRING .)
    ELSE            reduce using rule 35 (str -> STRING .)


state 36

    (57) special -> EYE .

    (               reduce using rule 57 (special -> EYE .)


state 37

    (58) special -> ZEROS .

    (               reduce using rule 58 (special -> ZEROS .)


state 38

    (59) special -> ONES .

    (               reduce using rule 59 (special -> ONES .)


state 39

    (69) forloop -> FOR . ID = range instruction

    ID              shift and go to state 84


state 40

    (70) whileloop -> WHILE . ( expression ) instruction

    (               shift and go to state 85


state 41

    (16) brk -> BREAK .

    ;               reduce using rule 16 (brk -> BREAK .)


state 42

    (17) cnt -> CONTINUE .

    ;               reduce using rule 17 (cnt -> CONTINUE .)


state 43

    (39) int -> INTNUM .

    '               reduce using rule 39 (int -> INTNUM .)
    +               reduce using rule 39 (int -> INTNUM .)
    -               reduce using rule 39 (int -> INTNUM .)
    *               reduce using rule 39 (int -> INTNUM .)
    /               reduce using rule 39 (int -> INTNUM .)
    DOTADD          reduce using rule 39 (int -> INTNUM .)
    DOTSUB          reduce using rule 39 (int -> INTNUM .)
    DOTMUL          reduce using rule 39 (int -> INTNUM .)
    DOTDIV          reduce using rule 39 (int -> INTNUM .)
    LE              reduce using rule 39 (int -> INTNUM .)
    GE              reduce using rule 39 (int -> INTNUM .)
    EQ              reduce using rule 39 (int -> INTNUM .)
    >               reduce using rule 39 (int -> INTNUM .)
    <               reduce using rule 39 (int -> INTNUM .)
    DIFF            reduce using rule 39 (int -> INTNUM .)
    [               reduce using rule 39 (int -> INTNUM .)
    (               reduce using rule 39 (int -> INTNUM .)
    IF              reduce using rule 39 (int -> INTNUM .)
    RETURN          reduce using rule 39 (int -> INTNUM .)
    PRINT           reduce using rule 39 (int -> INTNUM .)
    {               reduce using rule 39 (int -> INTNUM .)
    ID              reduce using rule 39 (int -> INTNUM .)
    STRING          reduce using rule 39 (int -> INTNUM .)
    EYE             reduce using rule 39 (int -> INTNUM .)
    ZEROS           reduce using rule 39 (int -> INTNUM .)
    ONES            reduce using rule 39 (int -> INTNUM .)
    FOR             reduce using rule 39 (int -> INTNUM .)
    WHILE           reduce using rule 39 (int -> INTNUM .)
    BREAK           reduce using rule 39 (int -> INTNUM .)
    CONTINUE        reduce using rule 39 (int -> INTNUM .)
    INTNUM          reduce using rule 39 (int -> INTNUM .)
    FLOATNUM        reduce using rule 39 (int -> INTNUM .)
    $end            reduce using rule 39 (int -> INTNUM .)
    }               reduce using rule 39 (int -> INTNUM .)
    )               reduce using rule 39 (int -> INTNUM .)
    ,               reduce using rule 39 (int -> INTNUM .)
    ]               reduce using rule 39 (int -> INTNUM .)
    ;               reduce using rule 39 (int -> INTNUM .)
    :               reduce using rule 39 (int -> INTNUM .)
    ELSE            reduce using rule 39 (int -> INTNUM .)


state 44

    (40) float -> FLOATNUM .

    '               reduce using rule 40 (float -> FLOATNUM .)
    +               reduce using rule 40 (float -> FLOATNUM .)
    -               reduce using rule 40 (float -> FLOATNUM .)
    *               reduce using rule 40 (float -> FLOATNUM .)
    /               reduce using rule 40 (float -> FLOATNUM .)
    DOTADD          reduce using rule 40 (float -> FLOATNUM .)
    DOTSUB          reduce using rule 40 (float -> FLOATNUM .)
    DOTMUL          reduce using rule 40 (float -> FLOATNUM .)
    DOTDIV          reduce using rule 40 (float -> FLOATNUM .)
    LE              reduce using rule 40 (float -> FLOATNUM .)
    GE              reduce using rule 40 (float -> FLOATNUM .)
    EQ              reduce using rule 40 (float -> FLOATNUM .)
    >               reduce using rule 40 (float -> FLOATNUM .)
    <               reduce using rule 40 (float -> FLOATNUM .)
    DIFF            reduce using rule 40 (float -> FLOATNUM .)
    [               reduce using rule 40 (float -> FLOATNUM .)
    (               reduce using rule 40 (float -> FLOATNUM .)
    IF              reduce using rule 40 (float -> FLOATNUM .)
    RETURN          reduce using rule 40 (float -> FLOATNUM .)
    PRINT           reduce using rule 40 (float -> FLOATNUM .)
    {               reduce using rule 40 (float -> FLOATNUM .)
    ID              reduce using rule 40 (float -> FLOATNUM .)
    STRING          reduce using rule 40 (float -> FLOATNUM .)
    EYE             reduce using rule 40 (float -> FLOATNUM .)
    ZEROS           reduce using rule 40 (float -> FLOATNUM .)
    ONES            reduce using rule 40 (float -> FLOATNUM .)
    FOR             reduce using rule 40 (float -> FLOATNUM .)
    WHILE           reduce using rule 40 (float -> FLOATNUM .)
    BREAK           reduce using rule 40 (float -> FLOATNUM .)
    CONTINUE        reduce using rule 40 (float -> FLOATNUM .)
    INTNUM          reduce using rule 40 (float -> FLOATNUM .)
    FLOATNUM        reduce using rule 40 (float -> FLOATNUM .)
    $end            reduce using rule 40 (float -> FLOATNUM .)
    }               reduce using rule 40 (float -> FLOATNUM .)
    )               reduce using rule 40 (float -> FLOATNUM .)
    ,               reduce using rule 40 (float -> FLOATNUM .)
    ]               reduce using rule 40 (float -> FLOATNUM .)
    ;               reduce using rule 40 (float -> FLOATNUM .)
    :               reduce using rule 40 (float -> FLOATNUM .)
    ELSE            reduce using rule 40 (float -> FLOATNUM .)


state 45

    (4) instructions -> instruction instructions .

    $end            reduce using rule 4 (instructions -> instruction instructions .)
    }               reduce using rule 4 (instructions -> instruction instructions .)


state 46

    (36) transpose -> expression ' .

    '               reduce using rule 36 (transpose -> expression ' .)
    +               reduce using rule 36 (transpose -> expression ' .)
    -               reduce using rule 36 (transpose -> expression ' .)
    *               reduce using rule 36 (transpose -> expression ' .)
    /               reduce using rule 36 (transpose -> expression ' .)
    DOTADD          reduce using rule 36 (transpose -> expression ' .)
    DOTSUB          reduce using rule 36 (transpose -> expression ' .)
    DOTMUL          reduce using rule 36 (transpose -> expression ' .)
    DOTDIV          reduce using rule 36 (transpose -> expression ' .)
    LE              reduce using rule 36 (transpose -> expression ' .)
    GE              reduce using rule 36 (transpose -> expression ' .)
    EQ              reduce using rule 36 (transpose -> expression ' .)
    >               reduce using rule 36 (transpose -> expression ' .)
    <               reduce using rule 36 (transpose -> expression ' .)
    DIFF            reduce using rule 36 (transpose -> expression ' .)
    [               reduce using rule 36 (transpose -> expression ' .)
    (               reduce using rule 36 (transpose -> expression ' .)
    IF              reduce using rule 36 (transpose -> expression ' .)
    RETURN          reduce using rule 36 (transpose -> expression ' .)
    PRINT           reduce using rule 36 (transpose -> expression ' .)
    {               reduce using rule 36 (transpose -> expression ' .)
    ID              reduce using rule 36 (transpose -> expression ' .)
    STRING          reduce using rule 36 (transpose -> expression ' .)
    EYE             reduce using rule 36 (transpose -> expression ' .)
    ZEROS           reduce using rule 36 (transpose -> expression ' .)
    ONES            reduce using rule 36 (transpose -> expression ' .)
    FOR             reduce using rule 36 (transpose -> expression ' .)
    WHILE           reduce using rule 36 (transpose -> expression ' .)
    BREAK           reduce using rule 36 (transpose -> expression ' .)
    CONTINUE        reduce using rule 36 (transpose -> expression ' .)
    INTNUM          reduce using rule 36 (transpose -> expression ' .)
    FLOATNUM        reduce using rule 36 (transpose -> expression ' .)
    $end            reduce using rule 36 (transpose -> expression ' .)
    }               reduce using rule 36 (transpose -> expression ' .)
    )               reduce using rule 36 (transpose -> expression ' .)
    ,               reduce using rule 36 (transpose -> expression ' .)
    ]               reduce using rule 36 (transpose -> expression ' .)
    ;               reduce using rule 36 (transpose -> expression ' .)
    :               reduce using rule 36 (transpose -> expression ' .)
    ELSE            reduce using rule 36 (transpose -> expression ' .)


state 47

    (43) mutexp -> expression + . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 86
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 48

    (44) mutexp -> expression - . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 87
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 49

    (45) mutexp -> expression * . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 88
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 50

    (46) mutexp -> expression / . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 89
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 51

    (47) mutexp -> expression DOTADD . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 90
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 52

    (48) mutexp -> expression DOTSUB . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 91
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 53

    (49) mutexp -> expression DOTMUL . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 92
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 54

    (50) mutexp -> expression DOTDIV . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 93
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 55

    (51) compexp -> expression LE . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 94
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 56

    (52) compexp -> expression GE . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 95
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 57

    (53) compexp -> expression EQ . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 96
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 58

    (54) compexp -> expression > . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 97
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 59

    (55) compexp -> expression < . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 98
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 60

    (56) compexp -> expression DIFF . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 99
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 61

    (7) instruction -> assignment ; .

    [               reduce using rule 7 (instruction -> assignment ; .)
    (               reduce using rule 7 (instruction -> assignment ; .)
    -               reduce using rule 7 (instruction -> assignment ; .)
    IF              reduce using rule 7 (instruction -> assignment ; .)
    RETURN          reduce using rule 7 (instruction -> assignment ; .)
    PRINT           reduce using rule 7 (instruction -> assignment ; .)
    {               reduce using rule 7 (instruction -> assignment ; .)
    ID              reduce using rule 7 (instruction -> assignment ; .)
    STRING          reduce using rule 7 (instruction -> assignment ; .)
    EYE             reduce using rule 7 (instruction -> assignment ; .)
    ZEROS           reduce using rule 7 (instruction -> assignment ; .)
    ONES            reduce using rule 7 (instruction -> assignment ; .)
    FOR             reduce using rule 7 (instruction -> assignment ; .)
    WHILE           reduce using rule 7 (instruction -> assignment ; .)
    BREAK           reduce using rule 7 (instruction -> assignment ; .)
    CONTINUE        reduce using rule 7 (instruction -> assignment ; .)
    INTNUM          reduce using rule 7 (instruction -> assignment ; .)
    FLOATNUM        reduce using rule 7 (instruction -> assignment ; .)
    $end            reduce using rule 7 (instruction -> assignment ; .)
    }               reduce using rule 7 (instruction -> assignment ; .)
    ELSE            reduce using rule 7 (instruction -> assignment ; .)


state 62

    (10) instruction -> returnexpr ; .

    [               reduce using rule 10 (instruction -> returnexpr ; .)
    (               reduce using rule 10 (instruction -> returnexpr ; .)
    -               reduce using rule 10 (instruction -> returnexpr ; .)
    IF              reduce using rule 10 (instruction -> returnexpr ; .)
    RETURN          reduce using rule 10 (instruction -> returnexpr ; .)
    PRINT           reduce using rule 10 (instruction -> returnexpr ; .)
    {               reduce using rule 10 (instruction -> returnexpr ; .)
    ID              reduce using rule 10 (instruction -> returnexpr ; .)
    STRING          reduce using rule 10 (instruction -> returnexpr ; .)
    EYE             reduce using rule 10 (instruction -> returnexpr ; .)
    ZEROS           reduce using rule 10 (instruction -> returnexpr ; .)
    ONES            reduce using rule 10 (instruction -> returnexpr ; .)
    FOR             reduce using rule 10 (instruction -> returnexpr ; .)
    WHILE           reduce using rule 10 (instruction -> returnexpr ; .)
    BREAK           reduce using rule 10 (instruction -> returnexpr ; .)
    CONTINUE        reduce using rule 10 (instruction -> returnexpr ; .)
    INTNUM          reduce using rule 10 (instruction -> returnexpr ; .)
    FLOATNUM        reduce using rule 10 (instruction -> returnexpr ; .)
    $end            reduce using rule 10 (instruction -> returnexpr ; .)
    }               reduce using rule 10 (instruction -> returnexpr ; .)
    ELSE            reduce using rule 10 (instruction -> returnexpr ; .)


state 63

    (11) instruction -> printexpr ; .

    [               reduce using rule 11 (instruction -> printexpr ; .)
    (               reduce using rule 11 (instruction -> printexpr ; .)
    -               reduce using rule 11 (instruction -> printexpr ; .)
    IF              reduce using rule 11 (instruction -> printexpr ; .)
    RETURN          reduce using rule 11 (instruction -> printexpr ; .)
    PRINT           reduce using rule 11 (instruction -> printexpr ; .)
    {               reduce using rule 11 (instruction -> printexpr ; .)
    ID              reduce using rule 11 (instruction -> printexpr ; .)
    STRING          reduce using rule 11 (instruction -> printexpr ; .)
    EYE             reduce using rule 11 (instruction -> printexpr ; .)
    ZEROS           reduce using rule 11 (instruction -> printexpr ; .)
    ONES            reduce using rule 11 (instruction -> printexpr ; .)
    FOR             reduce using rule 11 (instruction -> printexpr ; .)
    WHILE           reduce using rule 11 (instruction -> printexpr ; .)
    BREAK           reduce using rule 11 (instruction -> printexpr ; .)
    CONTINUE        reduce using rule 11 (instruction -> printexpr ; .)
    INTNUM          reduce using rule 11 (instruction -> printexpr ; .)
    FLOATNUM        reduce using rule 11 (instruction -> printexpr ; .)
    $end            reduce using rule 11 (instruction -> printexpr ; .)
    }               reduce using rule 11 (instruction -> printexpr ; .)
    ELSE            reduce using rule 11 (instruction -> printexpr ; .)


state 64

    (12) instruction -> breakOrContinue ; .

    [               reduce using rule 12 (instruction -> breakOrContinue ; .)
    (               reduce using rule 12 (instruction -> breakOrContinue ; .)
    -               reduce using rule 12 (instruction -> breakOrContinue ; .)
    IF              reduce using rule 12 (instruction -> breakOrContinue ; .)
    RETURN          reduce using rule 12 (instruction -> breakOrContinue ; .)
    PRINT           reduce using rule 12 (instruction -> breakOrContinue ; .)
    {               reduce using rule 12 (instruction -> breakOrContinue ; .)
    ID              reduce using rule 12 (instruction -> breakOrContinue ; .)
    STRING          reduce using rule 12 (instruction -> breakOrContinue ; .)
    EYE             reduce using rule 12 (instruction -> breakOrContinue ; .)
    ZEROS           reduce using rule 12 (instruction -> breakOrContinue ; .)
    ONES            reduce using rule 12 (instruction -> breakOrContinue ; .)
    FOR             reduce using rule 12 (instruction -> breakOrContinue ; .)
    WHILE           reduce using rule 12 (instruction -> breakOrContinue ; .)
    BREAK           reduce using rule 12 (instruction -> breakOrContinue ; .)
    CONTINUE        reduce using rule 12 (instruction -> breakOrContinue ; .)
    INTNUM          reduce using rule 12 (instruction -> breakOrContinue ; .)
    FLOATNUM        reduce using rule 12 (instruction -> breakOrContinue ; .)
    $end            reduce using rule 12 (instruction -> breakOrContinue ; .)
    }               reduce using rule 12 (instruction -> breakOrContinue ; .)
    ELSE            reduce using rule 12 (instruction -> breakOrContinue ; .)


state 65

    (19) assignment -> assignable = . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    assignable                     shift and go to state 72
    expression                     shift and go to state 100
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 66

    (20) assignment -> assignable ADDASSIGN . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    assignable                     shift and go to state 72
    expression                     shift and go to state 101
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 67

    (21) assignment -> assignable SUBASSIGN . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    assignable                     shift and go to state 72
    expression                     shift and go to state 102
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 68

    (22) assignment -> assignable MULASSIGN . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    assignable                     shift and go to state 72
    expression                     shift and go to state 103
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 69

    (23) assignment -> assignable DIVASSIGN . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    assignable                     shift and go to state 72
    expression                     shift and go to state 104
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 70

    (31) expression -> special ( . expression )
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    special                        shift and go to state 18
    expression                     shift and go to state 105
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 71

    (33) expression -> ( expression . )
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    )               shift and go to state 106
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60


state 72

    (29) expression -> assignable .

    )               reduce using rule 29 (expression -> assignable .)
    '               reduce using rule 29 (expression -> assignable .)
    +               reduce using rule 29 (expression -> assignable .)
    -               reduce using rule 29 (expression -> assignable .)
    *               reduce using rule 29 (expression -> assignable .)
    /               reduce using rule 29 (expression -> assignable .)
    DOTADD          reduce using rule 29 (expression -> assignable .)
    DOTSUB          reduce using rule 29 (expression -> assignable .)
    DOTMUL          reduce using rule 29 (expression -> assignable .)
    DOTDIV          reduce using rule 29 (expression -> assignable .)
    LE              reduce using rule 29 (expression -> assignable .)
    GE              reduce using rule 29 (expression -> assignable .)
    EQ              reduce using rule 29 (expression -> assignable .)
    >               reduce using rule 29 (expression -> assignable .)
    <               reduce using rule 29 (expression -> assignable .)
    DIFF            reduce using rule 29 (expression -> assignable .)
    ,               reduce using rule 29 (expression -> assignable .)
    ]               reduce using rule 29 (expression -> assignable .)
    [               reduce using rule 29 (expression -> assignable .)
    (               reduce using rule 29 (expression -> assignable .)
    IF              reduce using rule 29 (expression -> assignable .)
    RETURN          reduce using rule 29 (expression -> assignable .)
    PRINT           reduce using rule 29 (expression -> assignable .)
    {               reduce using rule 29 (expression -> assignable .)
    ID              reduce using rule 29 (expression -> assignable .)
    STRING          reduce using rule 29 (expression -> assignable .)
    EYE             reduce using rule 29 (expression -> assignable .)
    ZEROS           reduce using rule 29 (expression -> assignable .)
    ONES            reduce using rule 29 (expression -> assignable .)
    FOR             reduce using rule 29 (expression -> assignable .)
    WHILE           reduce using rule 29 (expression -> assignable .)
    BREAK           reduce using rule 29 (expression -> assignable .)
    CONTINUE        reduce using rule 29 (expression -> assignable .)
    INTNUM          reduce using rule 29 (expression -> assignable .)
    FLOATNUM        reduce using rule 29 (expression -> assignable .)
    $end            reduce using rule 29 (expression -> assignable .)
    }               reduce using rule 29 (expression -> assignable .)
    ;               reduce using rule 29 (expression -> assignable .)
    :               reduce using rule 29 (expression -> assignable .)
    ELSE            reduce using rule 29 (expression -> assignable .)


state 73

    (60) minit -> [ . matrixcontents ] , minit
    (61) minit -> [ . matrixcontents ]
    (32) expression -> [ . minit ]
    (63) matrixcontents -> . expression
    (64) matrixcontents -> . expression , matrixcontents
    (60) minit -> . [ matrixcontents ] , minit
    (61) minit -> . [ matrixcontents ]
    (62) minit -> . matrixcontents
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 73
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    matrixcontents                 shift and go to state 107
    minit                          shift and go to state 74
    expression                     shift and go to state 76
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 74

    (32) expression -> [ minit . ]

    ]               shift and go to state 108


state 75

    (62) minit -> matrixcontents .

    ]               reduce using rule 62 (minit -> matrixcontents .)


state 76

    (63) matrixcontents -> expression .
    (64) matrixcontents -> expression . , matrixcontents
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    ]               reduce using rule 63 (matrixcontents -> expression .)
    ,               shift and go to state 109
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60


state 77

    (34) expression -> - expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    '               reduce using rule 34 (expression -> - expression .)
    +               reduce using rule 34 (expression -> - expression .)
    -               reduce using rule 34 (expression -> - expression .)
    *               reduce using rule 34 (expression -> - expression .)
    /               reduce using rule 34 (expression -> - expression .)
    DOTADD          reduce using rule 34 (expression -> - expression .)
    DOTSUB          reduce using rule 34 (expression -> - expression .)
    DOTMUL          reduce using rule 34 (expression -> - expression .)
    DOTDIV          reduce using rule 34 (expression -> - expression .)
    LE              reduce using rule 34 (expression -> - expression .)
    GE              reduce using rule 34 (expression -> - expression .)
    EQ              reduce using rule 34 (expression -> - expression .)
    >               reduce using rule 34 (expression -> - expression .)
    <               reduce using rule 34 (expression -> - expression .)
    DIFF            reduce using rule 34 (expression -> - expression .)
    [               reduce using rule 34 (expression -> - expression .)
    (               reduce using rule 34 (expression -> - expression .)
    IF              reduce using rule 34 (expression -> - expression .)
    RETURN          reduce using rule 34 (expression -> - expression .)
    PRINT           reduce using rule 34 (expression -> - expression .)
    {               reduce using rule 34 (expression -> - expression .)
    ID              reduce using rule 34 (expression -> - expression .)
    STRING          reduce using rule 34 (expression -> - expression .)
    EYE             reduce using rule 34 (expression -> - expression .)
    ZEROS           reduce using rule 34 (expression -> - expression .)
    ONES            reduce using rule 34 (expression -> - expression .)
    FOR             reduce using rule 34 (expression -> - expression .)
    WHILE           reduce using rule 34 (expression -> - expression .)
    BREAK           reduce using rule 34 (expression -> - expression .)
    CONTINUE        reduce using rule 34 (expression -> - expression .)
    INTNUM          reduce using rule 34 (expression -> - expression .)
    FLOATNUM        reduce using rule 34 (expression -> - expression .)
    $end            reduce using rule 34 (expression -> - expression .)
    }               reduce using rule 34 (expression -> - expression .)
    )               reduce using rule 34 (expression -> - expression .)
    ,               reduce using rule 34 (expression -> - expression .)
    ]               reduce using rule 34 (expression -> - expression .)
    ;               reduce using rule 34 (expression -> - expression .)
    :               reduce using rule 34 (expression -> - expression .)
    ELSE            reduce using rule 34 (expression -> - expression .)

  ! '               [ shift and go to state 46 ]
  ! +               [ shift and go to state 47 ]
  ! -               [ shift and go to state 48 ]
  ! *               [ shift and go to state 49 ]
  ! /               [ shift and go to state 50 ]
  ! DOTADD          [ shift and go to state 51 ]
  ! DOTSUB          [ shift and go to state 52 ]
  ! DOTMUL          [ shift and go to state 53 ]
  ! DOTDIV          [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 57 ]
  ! >               [ shift and go to state 58 ]
  ! <               [ shift and go to state 59 ]
  ! DIFF            [ shift and go to state 60 ]


state 78

    (65) ifexpr -> IF ( . expression ) instruction
    (66) ifexpr -> IF ( . expression ) instruction ELSE instruction
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 110
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 79

    (72) returnexpr -> RETURN expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    ;               reduce using rule 72 (returnexpr -> RETURN expression .)
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60


state 80

    (73) printexpr -> PRINT printable .

    ;               reduce using rule 73 (printexpr -> PRINT printable .)


state 81

    (74) printable -> expression .
    (75) printable -> expression . , printable
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    ;               reduce using rule 74 (printable -> expression .)
    ,               shift and go to state 111
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60


state 82

    (18) complexinstruction -> { instructions . }

    }               shift and go to state 112


state 83

    (25) assignable -> ID [ . expression , expression ]
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 113
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 84

    (69) forloop -> FOR ID . = range instruction

    =               shift and go to state 114


state 85

    (70) whileloop -> WHILE ( . expression ) instruction
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 115
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 86

    (43) mutexp -> expression + expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    +               reduce using rule 43 (mutexp -> expression + expression .)
    -               reduce using rule 43 (mutexp -> expression + expression .)
    DOTADD          reduce using rule 43 (mutexp -> expression + expression .)
    DOTSUB          reduce using rule 43 (mutexp -> expression + expression .)
    DOTMUL          reduce using rule 43 (mutexp -> expression + expression .)
    DOTDIV          reduce using rule 43 (mutexp -> expression + expression .)
    LE              reduce using rule 43 (mutexp -> expression + expression .)
    GE              reduce using rule 43 (mutexp -> expression + expression .)
    EQ              reduce using rule 43 (mutexp -> expression + expression .)
    >               reduce using rule 43 (mutexp -> expression + expression .)
    <               reduce using rule 43 (mutexp -> expression + expression .)
    DIFF            reduce using rule 43 (mutexp -> expression + expression .)
    [               reduce using rule 43 (mutexp -> expression + expression .)
    (               reduce using rule 43 (mutexp -> expression + expression .)
    IF              reduce using rule 43 (mutexp -> expression + expression .)
    RETURN          reduce using rule 43 (mutexp -> expression + expression .)
    PRINT           reduce using rule 43 (mutexp -> expression + expression .)
    {               reduce using rule 43 (mutexp -> expression + expression .)
    ID              reduce using rule 43 (mutexp -> expression + expression .)
    STRING          reduce using rule 43 (mutexp -> expression + expression .)
    EYE             reduce using rule 43 (mutexp -> expression + expression .)
    ZEROS           reduce using rule 43 (mutexp -> expression + expression .)
    ONES            reduce using rule 43 (mutexp -> expression + expression .)
    FOR             reduce using rule 43 (mutexp -> expression + expression .)
    WHILE           reduce using rule 43 (mutexp -> expression + expression .)
    BREAK           reduce using rule 43 (mutexp -> expression + expression .)
    CONTINUE        reduce using rule 43 (mutexp -> expression + expression .)
    INTNUM          reduce using rule 43 (mutexp -> expression + expression .)
    FLOATNUM        reduce using rule 43 (mutexp -> expression + expression .)
    $end            reduce using rule 43 (mutexp -> expression + expression .)
    }               reduce using rule 43 (mutexp -> expression + expression .)
    )               reduce using rule 43 (mutexp -> expression + expression .)
    ,               reduce using rule 43 (mutexp -> expression + expression .)
    ]               reduce using rule 43 (mutexp -> expression + expression .)
    ;               reduce using rule 43 (mutexp -> expression + expression .)
    :               reduce using rule 43 (mutexp -> expression + expression .)
    ELSE            reduce using rule 43 (mutexp -> expression + expression .)
    '               shift and go to state 46
    *               shift and go to state 49
    /               shift and go to state 50

  ! '               [ reduce using rule 43 (mutexp -> expression + expression .) ]
  ! *               [ reduce using rule 43 (mutexp -> expression + expression .) ]
  ! /               [ reduce using rule 43 (mutexp -> expression + expression .) ]
  ! +               [ shift and go to state 47 ]
  ! -               [ shift and go to state 48 ]
  ! DOTADD          [ shift and go to state 51 ]
  ! DOTSUB          [ shift and go to state 52 ]
  ! DOTMUL          [ shift and go to state 53 ]
  ! DOTDIV          [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 57 ]
  ! >               [ shift and go to state 58 ]
  ! <               [ shift and go to state 59 ]
  ! DIFF            [ shift and go to state 60 ]


state 87

    (44) mutexp -> expression - expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    +               reduce using rule 44 (mutexp -> expression - expression .)
    -               reduce using rule 44 (mutexp -> expression - expression .)
    DOTADD          reduce using rule 44 (mutexp -> expression - expression .)
    DOTSUB          reduce using rule 44 (mutexp -> expression - expression .)
    DOTMUL          reduce using rule 44 (mutexp -> expression - expression .)
    DOTDIV          reduce using rule 44 (mutexp -> expression - expression .)
    LE              reduce using rule 44 (mutexp -> expression - expression .)
    GE              reduce using rule 44 (mutexp -> expression - expression .)
    EQ              reduce using rule 44 (mutexp -> expression - expression .)
    >               reduce using rule 44 (mutexp -> expression - expression .)
    <               reduce using rule 44 (mutexp -> expression - expression .)
    DIFF            reduce using rule 44 (mutexp -> expression - expression .)
    [               reduce using rule 44 (mutexp -> expression - expression .)
    (               reduce using rule 44 (mutexp -> expression - expression .)
    IF              reduce using rule 44 (mutexp -> expression - expression .)
    RETURN          reduce using rule 44 (mutexp -> expression - expression .)
    PRINT           reduce using rule 44 (mutexp -> expression - expression .)
    {               reduce using rule 44 (mutexp -> expression - expression .)
    ID              reduce using rule 44 (mutexp -> expression - expression .)
    STRING          reduce using rule 44 (mutexp -> expression - expression .)
    EYE             reduce using rule 44 (mutexp -> expression - expression .)
    ZEROS           reduce using rule 44 (mutexp -> expression - expression .)
    ONES            reduce using rule 44 (mutexp -> expression - expression .)
    FOR             reduce using rule 44 (mutexp -> expression - expression .)
    WHILE           reduce using rule 44 (mutexp -> expression - expression .)
    BREAK           reduce using rule 44 (mutexp -> expression - expression .)
    CONTINUE        reduce using rule 44 (mutexp -> expression - expression .)
    INTNUM          reduce using rule 44 (mutexp -> expression - expression .)
    FLOATNUM        reduce using rule 44 (mutexp -> expression - expression .)
    $end            reduce using rule 44 (mutexp -> expression - expression .)
    }               reduce using rule 44 (mutexp -> expression - expression .)
    )               reduce using rule 44 (mutexp -> expression - expression .)
    ,               reduce using rule 44 (mutexp -> expression - expression .)
    ]               reduce using rule 44 (mutexp -> expression - expression .)
    ;               reduce using rule 44 (mutexp -> expression - expression .)
    :               reduce using rule 44 (mutexp -> expression - expression .)
    ELSE            reduce using rule 44 (mutexp -> expression - expression .)
    '               shift and go to state 46
    *               shift and go to state 49
    /               shift and go to state 50

  ! '               [ reduce using rule 44 (mutexp -> expression - expression .) ]
  ! *               [ reduce using rule 44 (mutexp -> expression - expression .) ]
  ! /               [ reduce using rule 44 (mutexp -> expression - expression .) ]
  ! +               [ shift and go to state 47 ]
  ! -               [ shift and go to state 48 ]
  ! DOTADD          [ shift and go to state 51 ]
  ! DOTSUB          [ shift and go to state 52 ]
  ! DOTMUL          [ shift and go to state 53 ]
  ! DOTDIV          [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 57 ]
  ! >               [ shift and go to state 58 ]
  ! <               [ shift and go to state 59 ]
  ! DIFF            [ shift and go to state 60 ]


state 88

    (45) mutexp -> expression * expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    +               reduce using rule 45 (mutexp -> expression * expression .)
    -               reduce using rule 45 (mutexp -> expression * expression .)
    *               reduce using rule 45 (mutexp -> expression * expression .)
    /               reduce using rule 45 (mutexp -> expression * expression .)
    DOTADD          reduce using rule 45 (mutexp -> expression * expression .)
    DOTSUB          reduce using rule 45 (mutexp -> expression * expression .)
    DOTMUL          reduce using rule 45 (mutexp -> expression * expression .)
    DOTDIV          reduce using rule 45 (mutexp -> expression * expression .)
    LE              reduce using rule 45 (mutexp -> expression * expression .)
    GE              reduce using rule 45 (mutexp -> expression * expression .)
    EQ              reduce using rule 45 (mutexp -> expression * expression .)
    >               reduce using rule 45 (mutexp -> expression * expression .)
    <               reduce using rule 45 (mutexp -> expression * expression .)
    DIFF            reduce using rule 45 (mutexp -> expression * expression .)
    [               reduce using rule 45 (mutexp -> expression * expression .)
    (               reduce using rule 45 (mutexp -> expression * expression .)
    IF              reduce using rule 45 (mutexp -> expression * expression .)
    RETURN          reduce using rule 45 (mutexp -> expression * expression .)
    PRINT           reduce using rule 45 (mutexp -> expression * expression .)
    {               reduce using rule 45 (mutexp -> expression * expression .)
    ID              reduce using rule 45 (mutexp -> expression * expression .)
    STRING          reduce using rule 45 (mutexp -> expression * expression .)
    EYE             reduce using rule 45 (mutexp -> expression * expression .)
    ZEROS           reduce using rule 45 (mutexp -> expression * expression .)
    ONES            reduce using rule 45 (mutexp -> expression * expression .)
    FOR             reduce using rule 45 (mutexp -> expression * expression .)
    WHILE           reduce using rule 45 (mutexp -> expression * expression .)
    BREAK           reduce using rule 45 (mutexp -> expression * expression .)
    CONTINUE        reduce using rule 45 (mutexp -> expression * expression .)
    INTNUM          reduce using rule 45 (mutexp -> expression * expression .)
    FLOATNUM        reduce using rule 45 (mutexp -> expression * expression .)
    $end            reduce using rule 45 (mutexp -> expression * expression .)
    }               reduce using rule 45 (mutexp -> expression * expression .)
    )               reduce using rule 45 (mutexp -> expression * expression .)
    ,               reduce using rule 45 (mutexp -> expression * expression .)
    ]               reduce using rule 45 (mutexp -> expression * expression .)
    ;               reduce using rule 45 (mutexp -> expression * expression .)
    :               reduce using rule 45 (mutexp -> expression * expression .)
    ELSE            reduce using rule 45 (mutexp -> expression * expression .)
    '               shift and go to state 46

  ! '               [ reduce using rule 45 (mutexp -> expression * expression .) ]
  ! +               [ shift and go to state 47 ]
  ! -               [ shift and go to state 48 ]
  ! *               [ shift and go to state 49 ]
  ! /               [ shift and go to state 50 ]
  ! DOTADD          [ shift and go to state 51 ]
  ! DOTSUB          [ shift and go to state 52 ]
  ! DOTMUL          [ shift and go to state 53 ]
  ! DOTDIV          [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 57 ]
  ! >               [ shift and go to state 58 ]
  ! <               [ shift and go to state 59 ]
  ! DIFF            [ shift and go to state 60 ]


state 89

    (46) mutexp -> expression / expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    +               reduce using rule 46 (mutexp -> expression / expression .)
    -               reduce using rule 46 (mutexp -> expression / expression .)
    *               reduce using rule 46 (mutexp -> expression / expression .)
    /               reduce using rule 46 (mutexp -> expression / expression .)
    DOTADD          reduce using rule 46 (mutexp -> expression / expression .)
    DOTSUB          reduce using rule 46 (mutexp -> expression / expression .)
    DOTMUL          reduce using rule 46 (mutexp -> expression / expression .)
    DOTDIV          reduce using rule 46 (mutexp -> expression / expression .)
    LE              reduce using rule 46 (mutexp -> expression / expression .)
    GE              reduce using rule 46 (mutexp -> expression / expression .)
    EQ              reduce using rule 46 (mutexp -> expression / expression .)
    >               reduce using rule 46 (mutexp -> expression / expression .)
    <               reduce using rule 46 (mutexp -> expression / expression .)
    DIFF            reduce using rule 46 (mutexp -> expression / expression .)
    [               reduce using rule 46 (mutexp -> expression / expression .)
    (               reduce using rule 46 (mutexp -> expression / expression .)
    IF              reduce using rule 46 (mutexp -> expression / expression .)
    RETURN          reduce using rule 46 (mutexp -> expression / expression .)
    PRINT           reduce using rule 46 (mutexp -> expression / expression .)
    {               reduce using rule 46 (mutexp -> expression / expression .)
    ID              reduce using rule 46 (mutexp -> expression / expression .)
    STRING          reduce using rule 46 (mutexp -> expression / expression .)
    EYE             reduce using rule 46 (mutexp -> expression / expression .)
    ZEROS           reduce using rule 46 (mutexp -> expression / expression .)
    ONES            reduce using rule 46 (mutexp -> expression / expression .)
    FOR             reduce using rule 46 (mutexp -> expression / expression .)
    WHILE           reduce using rule 46 (mutexp -> expression / expression .)
    BREAK           reduce using rule 46 (mutexp -> expression / expression .)
    CONTINUE        reduce using rule 46 (mutexp -> expression / expression .)
    INTNUM          reduce using rule 46 (mutexp -> expression / expression .)
    FLOATNUM        reduce using rule 46 (mutexp -> expression / expression .)
    $end            reduce using rule 46 (mutexp -> expression / expression .)
    }               reduce using rule 46 (mutexp -> expression / expression .)
    )               reduce using rule 46 (mutexp -> expression / expression .)
    ,               reduce using rule 46 (mutexp -> expression / expression .)
    ]               reduce using rule 46 (mutexp -> expression / expression .)
    ;               reduce using rule 46 (mutexp -> expression / expression .)
    :               reduce using rule 46 (mutexp -> expression / expression .)
    ELSE            reduce using rule 46 (mutexp -> expression / expression .)
    '               shift and go to state 46

  ! '               [ reduce using rule 46 (mutexp -> expression / expression .) ]
  ! +               [ shift and go to state 47 ]
  ! -               [ shift and go to state 48 ]
  ! *               [ shift and go to state 49 ]
  ! /               [ shift and go to state 50 ]
  ! DOTADD          [ shift and go to state 51 ]
  ! DOTSUB          [ shift and go to state 52 ]
  ! DOTMUL          [ shift and go to state 53 ]
  ! DOTDIV          [ shift and go to state 54 ]
  ! LE              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 57 ]
  ! >               [ shift and go to state 58 ]
  ! <               [ shift and go to state 59 ]
  ! DIFF            [ shift and go to state 60 ]


state 90

    (47) mutexp -> expression DOTADD expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
    [               reduce using rule 47 (mutexp -> expression DOTADD expression .)
    (               reduce using rule 47 (mutexp -> expression DOTADD expression .)
    IF              reduce using rule 47 (mutexp -> expression DOTADD expression .)
    RETURN          reduce using rule 47 (mutexp -> expression DOTADD expression .)
    PRINT           reduce using rule 47 (mutexp -> expression DOTADD expression .)
    {               reduce using rule 47 (mutexp -> expression DOTADD expression .)
    ID              reduce using rule 47 (mutexp -> expression DOTADD expression .)
    STRING          reduce using rule 47 (mutexp -> expression DOTADD expression .)
    EYE             reduce using rule 47 (mutexp -> expression DOTADD expression .)
    ZEROS           reduce using rule 47 (mutexp -> expression DOTADD expression .)
    ONES            reduce using rule 47 (mutexp -> expression DOTADD expression .)
    FOR             reduce using rule 47 (mutexp -> expression DOTADD expression .)
    WHILE           reduce using rule 47 (mutexp -> expression DOTADD expression .)
    BREAK           reduce using rule 47 (mutexp -> expression DOTADD expression .)
    CONTINUE        reduce using rule 47 (mutexp -> expression DOTADD expression .)
    INTNUM          reduce using rule 47 (mutexp -> expression DOTADD expression .)
    FLOATNUM        reduce using rule 47 (mutexp -> expression DOTADD expression .)
    $end            reduce using rule 47 (mutexp -> expression DOTADD expression .)
    }               reduce using rule 47 (mutexp -> expression DOTADD expression .)
    )               reduce using rule 47 (mutexp -> expression DOTADD expression .)
    ,               reduce using rule 47 (mutexp -> expression DOTADD expression .)
    ]               reduce using rule 47 (mutexp -> expression DOTADD expression .)
    ;               reduce using rule 47 (mutexp -> expression DOTADD expression .)
    :               reduce using rule 47 (mutexp -> expression DOTADD expression .)
    ELSE            reduce using rule 47 (mutexp -> expression DOTADD expression .)
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60

  ! '               [ reduce using rule 47 (mutexp -> expression DOTADD expression .) ]
  ! +               [ reduce using rule 47 (mutexp -> expression DOTADD expression .) ]
  ! -               [ reduce using rule 47 (mutexp -> expression DOTADD expression .) ]
  ! *               [ reduce using rule 47 (mutexp -> expression DOTADD expression .) ]
  ! /               [ reduce using rule 47 (mutexp -> expression DOTADD expression .) ]
  ! DOTADD          [ reduce using rule 47 (mutexp -> expression DOTADD expression .) ]
  ! DOTSUB          [ reduce using rule 47 (mutexp -> expression DOTADD expression .) ]
  ! DOTMUL          [ reduce using rule 47 (mutexp -> expression DOTADD expression .) ]
  ! DOTDIV          [ reduce using rule 47 (mutexp -> expression DOTADD expression .) ]
  ! LE              [ reduce using rule 47 (mutexp -> expression DOTADD expression .) ]
  ! GE              [ reduce using rule 47 (mutexp -> expression DOTADD expression .) ]
  ! EQ              [ reduce using rule 47 (mutexp -> expression DOTADD expression .) ]
  ! >               [ reduce using rule 47 (mutexp -> expression DOTADD expression .) ]
  ! <               [ reduce using rule 47 (mutexp -> expression DOTADD expression .) ]
  ! DIFF            [ reduce using rule 47 (mutexp -> expression DOTADD expression .) ]


state 91

    (48) mutexp -> expression DOTSUB expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
    [               reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    (               reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    IF              reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    RETURN          reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    PRINT           reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    {               reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    ID              reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    STRING          reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    EYE             reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    ZEROS           reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    ONES            reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    FOR             reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    WHILE           reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    BREAK           reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    CONTINUE        reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    INTNUM          reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    FLOATNUM        reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    $end            reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    }               reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    )               reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    ,               reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    ]               reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    ;               reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    :               reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    ELSE            reduce using rule 48 (mutexp -> expression DOTSUB expression .)
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60

  ! '               [ reduce using rule 48 (mutexp -> expression DOTSUB expression .) ]
  ! +               [ reduce using rule 48 (mutexp -> expression DOTSUB expression .) ]
  ! -               [ reduce using rule 48 (mutexp -> expression DOTSUB expression .) ]
  ! *               [ reduce using rule 48 (mutexp -> expression DOTSUB expression .) ]
  ! /               [ reduce using rule 48 (mutexp -> expression DOTSUB expression .) ]
  ! DOTADD          [ reduce using rule 48 (mutexp -> expression DOTSUB expression .) ]
  ! DOTSUB          [ reduce using rule 48 (mutexp -> expression DOTSUB expression .) ]
  ! DOTMUL          [ reduce using rule 48 (mutexp -> expression DOTSUB expression .) ]
  ! DOTDIV          [ reduce using rule 48 (mutexp -> expression DOTSUB expression .) ]
  ! LE              [ reduce using rule 48 (mutexp -> expression DOTSUB expression .) ]
  ! GE              [ reduce using rule 48 (mutexp -> expression DOTSUB expression .) ]
  ! EQ              [ reduce using rule 48 (mutexp -> expression DOTSUB expression .) ]
  ! >               [ reduce using rule 48 (mutexp -> expression DOTSUB expression .) ]
  ! <               [ reduce using rule 48 (mutexp -> expression DOTSUB expression .) ]
  ! DIFF            [ reduce using rule 48 (mutexp -> expression DOTSUB expression .) ]


state 92

    (49) mutexp -> expression DOTMUL expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
    [               reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    (               reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    IF              reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    RETURN          reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    PRINT           reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    {               reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    ID              reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    STRING          reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    EYE             reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    ZEROS           reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    ONES            reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    FOR             reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    WHILE           reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    BREAK           reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    CONTINUE        reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    INTNUM          reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    FLOATNUM        reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    $end            reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    }               reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    )               reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    ,               reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    ]               reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    ;               reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    :               reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    ELSE            reduce using rule 49 (mutexp -> expression DOTMUL expression .)
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60

  ! '               [ reduce using rule 49 (mutexp -> expression DOTMUL expression .) ]
  ! +               [ reduce using rule 49 (mutexp -> expression DOTMUL expression .) ]
  ! -               [ reduce using rule 49 (mutexp -> expression DOTMUL expression .) ]
  ! *               [ reduce using rule 49 (mutexp -> expression DOTMUL expression .) ]
  ! /               [ reduce using rule 49 (mutexp -> expression DOTMUL expression .) ]
  ! DOTADD          [ reduce using rule 49 (mutexp -> expression DOTMUL expression .) ]
  ! DOTSUB          [ reduce using rule 49 (mutexp -> expression DOTMUL expression .) ]
  ! DOTMUL          [ reduce using rule 49 (mutexp -> expression DOTMUL expression .) ]
  ! DOTDIV          [ reduce using rule 49 (mutexp -> expression DOTMUL expression .) ]
  ! LE              [ reduce using rule 49 (mutexp -> expression DOTMUL expression .) ]
  ! GE              [ reduce using rule 49 (mutexp -> expression DOTMUL expression .) ]
  ! EQ              [ reduce using rule 49 (mutexp -> expression DOTMUL expression .) ]
  ! >               [ reduce using rule 49 (mutexp -> expression DOTMUL expression .) ]
  ! <               [ reduce using rule 49 (mutexp -> expression DOTMUL expression .) ]
  ! DIFF            [ reduce using rule 49 (mutexp -> expression DOTMUL expression .) ]


state 93

    (50) mutexp -> expression DOTDIV expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
    [               reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    (               reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    IF              reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    RETURN          reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    PRINT           reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    {               reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    ID              reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    STRING          reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    EYE             reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    ZEROS           reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    ONES            reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    FOR             reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    WHILE           reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    BREAK           reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    CONTINUE        reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    INTNUM          reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    FLOATNUM        reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    $end            reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    }               reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    )               reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    ,               reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    ]               reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    ;               reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    :               reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    ELSE            reduce using rule 50 (mutexp -> expression DOTDIV expression .)
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60

  ! '               [ reduce using rule 50 (mutexp -> expression DOTDIV expression .) ]
  ! +               [ reduce using rule 50 (mutexp -> expression DOTDIV expression .) ]
  ! -               [ reduce using rule 50 (mutexp -> expression DOTDIV expression .) ]
  ! *               [ reduce using rule 50 (mutexp -> expression DOTDIV expression .) ]
  ! /               [ reduce using rule 50 (mutexp -> expression DOTDIV expression .) ]
  ! DOTADD          [ reduce using rule 50 (mutexp -> expression DOTDIV expression .) ]
  ! DOTSUB          [ reduce using rule 50 (mutexp -> expression DOTDIV expression .) ]
  ! DOTMUL          [ reduce using rule 50 (mutexp -> expression DOTDIV expression .) ]
  ! DOTDIV          [ reduce using rule 50 (mutexp -> expression DOTDIV expression .) ]
  ! LE              [ reduce using rule 50 (mutexp -> expression DOTDIV expression .) ]
  ! GE              [ reduce using rule 50 (mutexp -> expression DOTDIV expression .) ]
  ! EQ              [ reduce using rule 50 (mutexp -> expression DOTDIV expression .) ]
  ! >               [ reduce using rule 50 (mutexp -> expression DOTDIV expression .) ]
  ! <               [ reduce using rule 50 (mutexp -> expression DOTDIV expression .) ]
  ! DIFF            [ reduce using rule 50 (mutexp -> expression DOTDIV expression .) ]


state 94

    (51) compexp -> expression LE expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
    [               reduce using rule 51 (compexp -> expression LE expression .)
    (               reduce using rule 51 (compexp -> expression LE expression .)
    IF              reduce using rule 51 (compexp -> expression LE expression .)
    RETURN          reduce using rule 51 (compexp -> expression LE expression .)
    PRINT           reduce using rule 51 (compexp -> expression LE expression .)
    {               reduce using rule 51 (compexp -> expression LE expression .)
    ID              reduce using rule 51 (compexp -> expression LE expression .)
    STRING          reduce using rule 51 (compexp -> expression LE expression .)
    EYE             reduce using rule 51 (compexp -> expression LE expression .)
    ZEROS           reduce using rule 51 (compexp -> expression LE expression .)
    ONES            reduce using rule 51 (compexp -> expression LE expression .)
    FOR             reduce using rule 51 (compexp -> expression LE expression .)
    WHILE           reduce using rule 51 (compexp -> expression LE expression .)
    BREAK           reduce using rule 51 (compexp -> expression LE expression .)
    CONTINUE        reduce using rule 51 (compexp -> expression LE expression .)
    INTNUM          reduce using rule 51 (compexp -> expression LE expression .)
    FLOATNUM        reduce using rule 51 (compexp -> expression LE expression .)
    $end            reduce using rule 51 (compexp -> expression LE expression .)
    }               reduce using rule 51 (compexp -> expression LE expression .)
    )               reduce using rule 51 (compexp -> expression LE expression .)
    ,               reduce using rule 51 (compexp -> expression LE expression .)
    ]               reduce using rule 51 (compexp -> expression LE expression .)
    ;               reduce using rule 51 (compexp -> expression LE expression .)
    :               reduce using rule 51 (compexp -> expression LE expression .)
    ELSE            reduce using rule 51 (compexp -> expression LE expression .)
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60

  ! '               [ reduce using rule 51 (compexp -> expression LE expression .) ]
  ! +               [ reduce using rule 51 (compexp -> expression LE expression .) ]
  ! -               [ reduce using rule 51 (compexp -> expression LE expression .) ]
  ! *               [ reduce using rule 51 (compexp -> expression LE expression .) ]
  ! /               [ reduce using rule 51 (compexp -> expression LE expression .) ]
  ! DOTADD          [ reduce using rule 51 (compexp -> expression LE expression .) ]
  ! DOTSUB          [ reduce using rule 51 (compexp -> expression LE expression .) ]
  ! DOTMUL          [ reduce using rule 51 (compexp -> expression LE expression .) ]
  ! DOTDIV          [ reduce using rule 51 (compexp -> expression LE expression .) ]
  ! LE              [ reduce using rule 51 (compexp -> expression LE expression .) ]
  ! GE              [ reduce using rule 51 (compexp -> expression LE expression .) ]
  ! EQ              [ reduce using rule 51 (compexp -> expression LE expression .) ]
  ! >               [ reduce using rule 51 (compexp -> expression LE expression .) ]
  ! <               [ reduce using rule 51 (compexp -> expression LE expression .) ]
  ! DIFF            [ reduce using rule 51 (compexp -> expression LE expression .) ]


state 95

    (52) compexp -> expression GE expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
    [               reduce using rule 52 (compexp -> expression GE expression .)
    (               reduce using rule 52 (compexp -> expression GE expression .)
    IF              reduce using rule 52 (compexp -> expression GE expression .)
    RETURN          reduce using rule 52 (compexp -> expression GE expression .)
    PRINT           reduce using rule 52 (compexp -> expression GE expression .)
    {               reduce using rule 52 (compexp -> expression GE expression .)
    ID              reduce using rule 52 (compexp -> expression GE expression .)
    STRING          reduce using rule 52 (compexp -> expression GE expression .)
    EYE             reduce using rule 52 (compexp -> expression GE expression .)
    ZEROS           reduce using rule 52 (compexp -> expression GE expression .)
    ONES            reduce using rule 52 (compexp -> expression GE expression .)
    FOR             reduce using rule 52 (compexp -> expression GE expression .)
    WHILE           reduce using rule 52 (compexp -> expression GE expression .)
    BREAK           reduce using rule 52 (compexp -> expression GE expression .)
    CONTINUE        reduce using rule 52 (compexp -> expression GE expression .)
    INTNUM          reduce using rule 52 (compexp -> expression GE expression .)
    FLOATNUM        reduce using rule 52 (compexp -> expression GE expression .)
    $end            reduce using rule 52 (compexp -> expression GE expression .)
    }               reduce using rule 52 (compexp -> expression GE expression .)
    )               reduce using rule 52 (compexp -> expression GE expression .)
    ,               reduce using rule 52 (compexp -> expression GE expression .)
    ]               reduce using rule 52 (compexp -> expression GE expression .)
    ;               reduce using rule 52 (compexp -> expression GE expression .)
    :               reduce using rule 52 (compexp -> expression GE expression .)
    ELSE            reduce using rule 52 (compexp -> expression GE expression .)
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60

  ! '               [ reduce using rule 52 (compexp -> expression GE expression .) ]
  ! +               [ reduce using rule 52 (compexp -> expression GE expression .) ]
  ! -               [ reduce using rule 52 (compexp -> expression GE expression .) ]
  ! *               [ reduce using rule 52 (compexp -> expression GE expression .) ]
  ! /               [ reduce using rule 52 (compexp -> expression GE expression .) ]
  ! DOTADD          [ reduce using rule 52 (compexp -> expression GE expression .) ]
  ! DOTSUB          [ reduce using rule 52 (compexp -> expression GE expression .) ]
  ! DOTMUL          [ reduce using rule 52 (compexp -> expression GE expression .) ]
  ! DOTDIV          [ reduce using rule 52 (compexp -> expression GE expression .) ]
  ! LE              [ reduce using rule 52 (compexp -> expression GE expression .) ]
  ! GE              [ reduce using rule 52 (compexp -> expression GE expression .) ]
  ! EQ              [ reduce using rule 52 (compexp -> expression GE expression .) ]
  ! >               [ reduce using rule 52 (compexp -> expression GE expression .) ]
  ! <               [ reduce using rule 52 (compexp -> expression GE expression .) ]
  ! DIFF            [ reduce using rule 52 (compexp -> expression GE expression .) ]


state 96

    (53) compexp -> expression EQ expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
    [               reduce using rule 53 (compexp -> expression EQ expression .)
    (               reduce using rule 53 (compexp -> expression EQ expression .)
    IF              reduce using rule 53 (compexp -> expression EQ expression .)
    RETURN          reduce using rule 53 (compexp -> expression EQ expression .)
    PRINT           reduce using rule 53 (compexp -> expression EQ expression .)
    {               reduce using rule 53 (compexp -> expression EQ expression .)
    ID              reduce using rule 53 (compexp -> expression EQ expression .)
    STRING          reduce using rule 53 (compexp -> expression EQ expression .)
    EYE             reduce using rule 53 (compexp -> expression EQ expression .)
    ZEROS           reduce using rule 53 (compexp -> expression EQ expression .)
    ONES            reduce using rule 53 (compexp -> expression EQ expression .)
    FOR             reduce using rule 53 (compexp -> expression EQ expression .)
    WHILE           reduce using rule 53 (compexp -> expression EQ expression .)
    BREAK           reduce using rule 53 (compexp -> expression EQ expression .)
    CONTINUE        reduce using rule 53 (compexp -> expression EQ expression .)
    INTNUM          reduce using rule 53 (compexp -> expression EQ expression .)
    FLOATNUM        reduce using rule 53 (compexp -> expression EQ expression .)
    $end            reduce using rule 53 (compexp -> expression EQ expression .)
    }               reduce using rule 53 (compexp -> expression EQ expression .)
    )               reduce using rule 53 (compexp -> expression EQ expression .)
    ,               reduce using rule 53 (compexp -> expression EQ expression .)
    ]               reduce using rule 53 (compexp -> expression EQ expression .)
    ;               reduce using rule 53 (compexp -> expression EQ expression .)
    :               reduce using rule 53 (compexp -> expression EQ expression .)
    ELSE            reduce using rule 53 (compexp -> expression EQ expression .)
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60

  ! '               [ reduce using rule 53 (compexp -> expression EQ expression .) ]
  ! +               [ reduce using rule 53 (compexp -> expression EQ expression .) ]
  ! -               [ reduce using rule 53 (compexp -> expression EQ expression .) ]
  ! *               [ reduce using rule 53 (compexp -> expression EQ expression .) ]
  ! /               [ reduce using rule 53 (compexp -> expression EQ expression .) ]
  ! DOTADD          [ reduce using rule 53 (compexp -> expression EQ expression .) ]
  ! DOTSUB          [ reduce using rule 53 (compexp -> expression EQ expression .) ]
  ! DOTMUL          [ reduce using rule 53 (compexp -> expression EQ expression .) ]
  ! DOTDIV          [ reduce using rule 53 (compexp -> expression EQ expression .) ]
  ! LE              [ reduce using rule 53 (compexp -> expression EQ expression .) ]
  ! GE              [ reduce using rule 53 (compexp -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 53 (compexp -> expression EQ expression .) ]
  ! >               [ reduce using rule 53 (compexp -> expression EQ expression .) ]
  ! <               [ reduce using rule 53 (compexp -> expression EQ expression .) ]
  ! DIFF            [ reduce using rule 53 (compexp -> expression EQ expression .) ]


state 97

    (54) compexp -> expression > expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
    [               reduce using rule 54 (compexp -> expression > expression .)
    (               reduce using rule 54 (compexp -> expression > expression .)
    IF              reduce using rule 54 (compexp -> expression > expression .)
    RETURN          reduce using rule 54 (compexp -> expression > expression .)
    PRINT           reduce using rule 54 (compexp -> expression > expression .)
    {               reduce using rule 54 (compexp -> expression > expression .)
    ID              reduce using rule 54 (compexp -> expression > expression .)
    STRING          reduce using rule 54 (compexp -> expression > expression .)
    EYE             reduce using rule 54 (compexp -> expression > expression .)
    ZEROS           reduce using rule 54 (compexp -> expression > expression .)
    ONES            reduce using rule 54 (compexp -> expression > expression .)
    FOR             reduce using rule 54 (compexp -> expression > expression .)
    WHILE           reduce using rule 54 (compexp -> expression > expression .)
    BREAK           reduce using rule 54 (compexp -> expression > expression .)
    CONTINUE        reduce using rule 54 (compexp -> expression > expression .)
    INTNUM          reduce using rule 54 (compexp -> expression > expression .)
    FLOATNUM        reduce using rule 54 (compexp -> expression > expression .)
    $end            reduce using rule 54 (compexp -> expression > expression .)
    }               reduce using rule 54 (compexp -> expression > expression .)
    )               reduce using rule 54 (compexp -> expression > expression .)
    ,               reduce using rule 54 (compexp -> expression > expression .)
    ]               reduce using rule 54 (compexp -> expression > expression .)
    ;               reduce using rule 54 (compexp -> expression > expression .)
    :               reduce using rule 54 (compexp -> expression > expression .)
    ELSE            reduce using rule 54 (compexp -> expression > expression .)
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60

  ! '               [ reduce using rule 54 (compexp -> expression > expression .) ]
  ! +               [ reduce using rule 54 (compexp -> expression > expression .) ]
  ! -               [ reduce using rule 54 (compexp -> expression > expression .) ]
  ! *               [ reduce using rule 54 (compexp -> expression > expression .) ]
  ! /               [ reduce using rule 54 (compexp -> expression > expression .) ]
  ! DOTADD          [ reduce using rule 54 (compexp -> expression > expression .) ]
  ! DOTSUB          [ reduce using rule 54 (compexp -> expression > expression .) ]
  ! DOTMUL          [ reduce using rule 54 (compexp -> expression > expression .) ]
  ! DOTDIV          [ reduce using rule 54 (compexp -> expression > expression .) ]
  ! LE              [ reduce using rule 54 (compexp -> expression > expression .) ]
  ! GE              [ reduce using rule 54 (compexp -> expression > expression .) ]
  ! EQ              [ reduce using rule 54 (compexp -> expression > expression .) ]
  ! >               [ reduce using rule 54 (compexp -> expression > expression .) ]
  ! <               [ reduce using rule 54 (compexp -> expression > expression .) ]
  ! DIFF            [ reduce using rule 54 (compexp -> expression > expression .) ]


state 98

    (55) compexp -> expression < expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
    [               reduce using rule 55 (compexp -> expression < expression .)
    (               reduce using rule 55 (compexp -> expression < expression .)
    IF              reduce using rule 55 (compexp -> expression < expression .)
    RETURN          reduce using rule 55 (compexp -> expression < expression .)
    PRINT           reduce using rule 55 (compexp -> expression < expression .)
    {               reduce using rule 55 (compexp -> expression < expression .)
    ID              reduce using rule 55 (compexp -> expression < expression .)
    STRING          reduce using rule 55 (compexp -> expression < expression .)
    EYE             reduce using rule 55 (compexp -> expression < expression .)
    ZEROS           reduce using rule 55 (compexp -> expression < expression .)
    ONES            reduce using rule 55 (compexp -> expression < expression .)
    FOR             reduce using rule 55 (compexp -> expression < expression .)
    WHILE           reduce using rule 55 (compexp -> expression < expression .)
    BREAK           reduce using rule 55 (compexp -> expression < expression .)
    CONTINUE        reduce using rule 55 (compexp -> expression < expression .)
    INTNUM          reduce using rule 55 (compexp -> expression < expression .)
    FLOATNUM        reduce using rule 55 (compexp -> expression < expression .)
    $end            reduce using rule 55 (compexp -> expression < expression .)
    }               reduce using rule 55 (compexp -> expression < expression .)
    )               reduce using rule 55 (compexp -> expression < expression .)
    ,               reduce using rule 55 (compexp -> expression < expression .)
    ]               reduce using rule 55 (compexp -> expression < expression .)
    ;               reduce using rule 55 (compexp -> expression < expression .)
    :               reduce using rule 55 (compexp -> expression < expression .)
    ELSE            reduce using rule 55 (compexp -> expression < expression .)
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60

  ! '               [ reduce using rule 55 (compexp -> expression < expression .) ]
  ! +               [ reduce using rule 55 (compexp -> expression < expression .) ]
  ! -               [ reduce using rule 55 (compexp -> expression < expression .) ]
  ! *               [ reduce using rule 55 (compexp -> expression < expression .) ]
  ! /               [ reduce using rule 55 (compexp -> expression < expression .) ]
  ! DOTADD          [ reduce using rule 55 (compexp -> expression < expression .) ]
  ! DOTSUB          [ reduce using rule 55 (compexp -> expression < expression .) ]
  ! DOTMUL          [ reduce using rule 55 (compexp -> expression < expression .) ]
  ! DOTDIV          [ reduce using rule 55 (compexp -> expression < expression .) ]
  ! LE              [ reduce using rule 55 (compexp -> expression < expression .) ]
  ! GE              [ reduce using rule 55 (compexp -> expression < expression .) ]
  ! EQ              [ reduce using rule 55 (compexp -> expression < expression .) ]
  ! >               [ reduce using rule 55 (compexp -> expression < expression .) ]
  ! <               [ reduce using rule 55 (compexp -> expression < expression .) ]
  ! DIFF            [ reduce using rule 55 (compexp -> expression < expression .) ]


state 99

    (56) compexp -> expression DIFF expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

  ! shift/reduce conflict for ' resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for DOTADD resolved as shift
  ! shift/reduce conflict for DOTSUB resolved as shift
  ! shift/reduce conflict for DOTMUL resolved as shift
  ! shift/reduce conflict for DOTDIV resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
    [               reduce using rule 56 (compexp -> expression DIFF expression .)
    (               reduce using rule 56 (compexp -> expression DIFF expression .)
    IF              reduce using rule 56 (compexp -> expression DIFF expression .)
    RETURN          reduce using rule 56 (compexp -> expression DIFF expression .)
    PRINT           reduce using rule 56 (compexp -> expression DIFF expression .)
    {               reduce using rule 56 (compexp -> expression DIFF expression .)
    ID              reduce using rule 56 (compexp -> expression DIFF expression .)
    STRING          reduce using rule 56 (compexp -> expression DIFF expression .)
    EYE             reduce using rule 56 (compexp -> expression DIFF expression .)
    ZEROS           reduce using rule 56 (compexp -> expression DIFF expression .)
    ONES            reduce using rule 56 (compexp -> expression DIFF expression .)
    FOR             reduce using rule 56 (compexp -> expression DIFF expression .)
    WHILE           reduce using rule 56 (compexp -> expression DIFF expression .)
    BREAK           reduce using rule 56 (compexp -> expression DIFF expression .)
    CONTINUE        reduce using rule 56 (compexp -> expression DIFF expression .)
    INTNUM          reduce using rule 56 (compexp -> expression DIFF expression .)
    FLOATNUM        reduce using rule 56 (compexp -> expression DIFF expression .)
    $end            reduce using rule 56 (compexp -> expression DIFF expression .)
    }               reduce using rule 56 (compexp -> expression DIFF expression .)
    )               reduce using rule 56 (compexp -> expression DIFF expression .)
    ,               reduce using rule 56 (compexp -> expression DIFF expression .)
    ]               reduce using rule 56 (compexp -> expression DIFF expression .)
    ;               reduce using rule 56 (compexp -> expression DIFF expression .)
    :               reduce using rule 56 (compexp -> expression DIFF expression .)
    ELSE            reduce using rule 56 (compexp -> expression DIFF expression .)
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60

  ! '               [ reduce using rule 56 (compexp -> expression DIFF expression .) ]
  ! +               [ reduce using rule 56 (compexp -> expression DIFF expression .) ]
  ! -               [ reduce using rule 56 (compexp -> expression DIFF expression .) ]
  ! *               [ reduce using rule 56 (compexp -> expression DIFF expression .) ]
  ! /               [ reduce using rule 56 (compexp -> expression DIFF expression .) ]
  ! DOTADD          [ reduce using rule 56 (compexp -> expression DIFF expression .) ]
  ! DOTSUB          [ reduce using rule 56 (compexp -> expression DIFF expression .) ]
  ! DOTMUL          [ reduce using rule 56 (compexp -> expression DIFF expression .) ]
  ! DOTDIV          [ reduce using rule 56 (compexp -> expression DIFF expression .) ]
  ! LE              [ reduce using rule 56 (compexp -> expression DIFF expression .) ]
  ! GE              [ reduce using rule 56 (compexp -> expression DIFF expression .) ]
  ! EQ              [ reduce using rule 56 (compexp -> expression DIFF expression .) ]
  ! >               [ reduce using rule 56 (compexp -> expression DIFF expression .) ]
  ! <               [ reduce using rule 56 (compexp -> expression DIFF expression .) ]
  ! DIFF            [ reduce using rule 56 (compexp -> expression DIFF expression .) ]


state 100

    (19) assignment -> assignable = expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    ;               reduce using rule 19 (assignment -> assignable = expression .)
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60


state 101

    (20) assignment -> assignable ADDASSIGN expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    ;               reduce using rule 20 (assignment -> assignable ADDASSIGN expression .)
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60


state 102

    (21) assignment -> assignable SUBASSIGN expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    ;               reduce using rule 21 (assignment -> assignable SUBASSIGN expression .)
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60


state 103

    (22) assignment -> assignable MULASSIGN expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    ;               reduce using rule 22 (assignment -> assignable MULASSIGN expression .)
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60


state 104

    (23) assignment -> assignable DIVASSIGN expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    ;               reduce using rule 23 (assignment -> assignable DIVASSIGN expression .)
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60


state 105

    (31) expression -> special ( expression . )
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    )               shift and go to state 116
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60


state 106

    (33) expression -> ( expression ) .

    '               reduce using rule 33 (expression -> ( expression ) .)
    +               reduce using rule 33 (expression -> ( expression ) .)
    -               reduce using rule 33 (expression -> ( expression ) .)
    *               reduce using rule 33 (expression -> ( expression ) .)
    /               reduce using rule 33 (expression -> ( expression ) .)
    DOTADD          reduce using rule 33 (expression -> ( expression ) .)
    DOTSUB          reduce using rule 33 (expression -> ( expression ) .)
    DOTMUL          reduce using rule 33 (expression -> ( expression ) .)
    DOTDIV          reduce using rule 33 (expression -> ( expression ) .)
    LE              reduce using rule 33 (expression -> ( expression ) .)
    GE              reduce using rule 33 (expression -> ( expression ) .)
    EQ              reduce using rule 33 (expression -> ( expression ) .)
    >               reduce using rule 33 (expression -> ( expression ) .)
    <               reduce using rule 33 (expression -> ( expression ) .)
    DIFF            reduce using rule 33 (expression -> ( expression ) .)
    [               reduce using rule 33 (expression -> ( expression ) .)
    (               reduce using rule 33 (expression -> ( expression ) .)
    IF              reduce using rule 33 (expression -> ( expression ) .)
    RETURN          reduce using rule 33 (expression -> ( expression ) .)
    PRINT           reduce using rule 33 (expression -> ( expression ) .)
    {               reduce using rule 33 (expression -> ( expression ) .)
    ID              reduce using rule 33 (expression -> ( expression ) .)
    STRING          reduce using rule 33 (expression -> ( expression ) .)
    EYE             reduce using rule 33 (expression -> ( expression ) .)
    ZEROS           reduce using rule 33 (expression -> ( expression ) .)
    ONES            reduce using rule 33 (expression -> ( expression ) .)
    FOR             reduce using rule 33 (expression -> ( expression ) .)
    WHILE           reduce using rule 33 (expression -> ( expression ) .)
    BREAK           reduce using rule 33 (expression -> ( expression ) .)
    CONTINUE        reduce using rule 33 (expression -> ( expression ) .)
    INTNUM          reduce using rule 33 (expression -> ( expression ) .)
    FLOATNUM        reduce using rule 33 (expression -> ( expression ) .)
    $end            reduce using rule 33 (expression -> ( expression ) .)
    }               reduce using rule 33 (expression -> ( expression ) .)
    )               reduce using rule 33 (expression -> ( expression ) .)
    ,               reduce using rule 33 (expression -> ( expression ) .)
    ]               reduce using rule 33 (expression -> ( expression ) .)
    ;               reduce using rule 33 (expression -> ( expression ) .)
    :               reduce using rule 33 (expression -> ( expression ) .)
    ELSE            reduce using rule 33 (expression -> ( expression ) .)


state 107

    (60) minit -> [ matrixcontents . ] , minit
    (61) minit -> [ matrixcontents . ]
    (62) minit -> matrixcontents .

  ! shift/reduce conflict for ] resolved as shift
    ]               shift and go to state 117

  ! ]               [ reduce using rule 62 (minit -> matrixcontents .) ]


state 108

    (32) expression -> [ minit ] .

    '               reduce using rule 32 (expression -> [ minit ] .)
    +               reduce using rule 32 (expression -> [ minit ] .)
    -               reduce using rule 32 (expression -> [ minit ] .)
    *               reduce using rule 32 (expression -> [ minit ] .)
    /               reduce using rule 32 (expression -> [ minit ] .)
    DOTADD          reduce using rule 32 (expression -> [ minit ] .)
    DOTSUB          reduce using rule 32 (expression -> [ minit ] .)
    DOTMUL          reduce using rule 32 (expression -> [ minit ] .)
    DOTDIV          reduce using rule 32 (expression -> [ minit ] .)
    LE              reduce using rule 32 (expression -> [ minit ] .)
    GE              reduce using rule 32 (expression -> [ minit ] .)
    EQ              reduce using rule 32 (expression -> [ minit ] .)
    >               reduce using rule 32 (expression -> [ minit ] .)
    <               reduce using rule 32 (expression -> [ minit ] .)
    DIFF            reduce using rule 32 (expression -> [ minit ] .)
    [               reduce using rule 32 (expression -> [ minit ] .)
    (               reduce using rule 32 (expression -> [ minit ] .)
    IF              reduce using rule 32 (expression -> [ minit ] .)
    RETURN          reduce using rule 32 (expression -> [ minit ] .)
    PRINT           reduce using rule 32 (expression -> [ minit ] .)
    {               reduce using rule 32 (expression -> [ minit ] .)
    ID              reduce using rule 32 (expression -> [ minit ] .)
    STRING          reduce using rule 32 (expression -> [ minit ] .)
    EYE             reduce using rule 32 (expression -> [ minit ] .)
    ZEROS           reduce using rule 32 (expression -> [ minit ] .)
    ONES            reduce using rule 32 (expression -> [ minit ] .)
    FOR             reduce using rule 32 (expression -> [ minit ] .)
    WHILE           reduce using rule 32 (expression -> [ minit ] .)
    BREAK           reduce using rule 32 (expression -> [ minit ] .)
    CONTINUE        reduce using rule 32 (expression -> [ minit ] .)
    INTNUM          reduce using rule 32 (expression -> [ minit ] .)
    FLOATNUM        reduce using rule 32 (expression -> [ minit ] .)
    $end            reduce using rule 32 (expression -> [ minit ] .)
    }               reduce using rule 32 (expression -> [ minit ] .)
    )               reduce using rule 32 (expression -> [ minit ] .)
    ,               reduce using rule 32 (expression -> [ minit ] .)
    ]               reduce using rule 32 (expression -> [ minit ] .)
    ;               reduce using rule 32 (expression -> [ minit ] .)
    :               reduce using rule 32 (expression -> [ minit ] .)
    ELSE            reduce using rule 32 (expression -> [ minit ] .)


state 109

    (64) matrixcontents -> expression , . matrixcontents
    (63) matrixcontents -> . expression
    (64) matrixcontents -> . expression , matrixcontents
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 76
    matrixcontents                 shift and go to state 118
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 110

    (65) ifexpr -> IF ( expression . ) instruction
    (66) ifexpr -> IF ( expression . ) instruction ELSE instruction
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    )               shift and go to state 119
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60


state 111

    (75) printable -> expression , . printable
    (74) printable -> . expression
    (75) printable -> . expression , printable
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 81
    printable                      shift and go to state 120
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 112

    (18) complexinstruction -> { instructions } .

    [               reduce using rule 18 (complexinstruction -> { instructions } .)
    (               reduce using rule 18 (complexinstruction -> { instructions } .)
    -               reduce using rule 18 (complexinstruction -> { instructions } .)
    IF              reduce using rule 18 (complexinstruction -> { instructions } .)
    RETURN          reduce using rule 18 (complexinstruction -> { instructions } .)
    PRINT           reduce using rule 18 (complexinstruction -> { instructions } .)
    {               reduce using rule 18 (complexinstruction -> { instructions } .)
    ID              reduce using rule 18 (complexinstruction -> { instructions } .)
    STRING          reduce using rule 18 (complexinstruction -> { instructions } .)
    EYE             reduce using rule 18 (complexinstruction -> { instructions } .)
    ZEROS           reduce using rule 18 (complexinstruction -> { instructions } .)
    ONES            reduce using rule 18 (complexinstruction -> { instructions } .)
    FOR             reduce using rule 18 (complexinstruction -> { instructions } .)
    WHILE           reduce using rule 18 (complexinstruction -> { instructions } .)
    BREAK           reduce using rule 18 (complexinstruction -> { instructions } .)
    CONTINUE        reduce using rule 18 (complexinstruction -> { instructions } .)
    INTNUM          reduce using rule 18 (complexinstruction -> { instructions } .)
    FLOATNUM        reduce using rule 18 (complexinstruction -> { instructions } .)
    $end            reduce using rule 18 (complexinstruction -> { instructions } .)
    }               reduce using rule 18 (complexinstruction -> { instructions } .)
    ELSE            reduce using rule 18 (complexinstruction -> { instructions } .)


state 113

    (25) assignable -> ID [ expression . , expression ]
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    ,               shift and go to state 121
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60


state 114

    (69) forloop -> FOR ID = . range instruction
    (71) range -> . expression : expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    range                          shift and go to state 122
    expression                     shift and go to state 123
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 115

    (70) whileloop -> WHILE ( expression . ) instruction
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    )               shift and go to state 124
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60


state 116

    (31) expression -> special ( expression ) .

    '               reduce using rule 31 (expression -> special ( expression ) .)
    +               reduce using rule 31 (expression -> special ( expression ) .)
    -               reduce using rule 31 (expression -> special ( expression ) .)
    *               reduce using rule 31 (expression -> special ( expression ) .)
    /               reduce using rule 31 (expression -> special ( expression ) .)
    DOTADD          reduce using rule 31 (expression -> special ( expression ) .)
    DOTSUB          reduce using rule 31 (expression -> special ( expression ) .)
    DOTMUL          reduce using rule 31 (expression -> special ( expression ) .)
    DOTDIV          reduce using rule 31 (expression -> special ( expression ) .)
    LE              reduce using rule 31 (expression -> special ( expression ) .)
    GE              reduce using rule 31 (expression -> special ( expression ) .)
    EQ              reduce using rule 31 (expression -> special ( expression ) .)
    >               reduce using rule 31 (expression -> special ( expression ) .)
    <               reduce using rule 31 (expression -> special ( expression ) .)
    DIFF            reduce using rule 31 (expression -> special ( expression ) .)
    [               reduce using rule 31 (expression -> special ( expression ) .)
    (               reduce using rule 31 (expression -> special ( expression ) .)
    IF              reduce using rule 31 (expression -> special ( expression ) .)
    RETURN          reduce using rule 31 (expression -> special ( expression ) .)
    PRINT           reduce using rule 31 (expression -> special ( expression ) .)
    {               reduce using rule 31 (expression -> special ( expression ) .)
    ID              reduce using rule 31 (expression -> special ( expression ) .)
    STRING          reduce using rule 31 (expression -> special ( expression ) .)
    EYE             reduce using rule 31 (expression -> special ( expression ) .)
    ZEROS           reduce using rule 31 (expression -> special ( expression ) .)
    ONES            reduce using rule 31 (expression -> special ( expression ) .)
    FOR             reduce using rule 31 (expression -> special ( expression ) .)
    WHILE           reduce using rule 31 (expression -> special ( expression ) .)
    BREAK           reduce using rule 31 (expression -> special ( expression ) .)
    CONTINUE        reduce using rule 31 (expression -> special ( expression ) .)
    INTNUM          reduce using rule 31 (expression -> special ( expression ) .)
    FLOATNUM        reduce using rule 31 (expression -> special ( expression ) .)
    $end            reduce using rule 31 (expression -> special ( expression ) .)
    }               reduce using rule 31 (expression -> special ( expression ) .)
    )               reduce using rule 31 (expression -> special ( expression ) .)
    ,               reduce using rule 31 (expression -> special ( expression ) .)
    ]               reduce using rule 31 (expression -> special ( expression ) .)
    ;               reduce using rule 31 (expression -> special ( expression ) .)
    :               reduce using rule 31 (expression -> special ( expression ) .)
    ELSE            reduce using rule 31 (expression -> special ( expression ) .)


state 117

    (60) minit -> [ matrixcontents ] . , minit
    (61) minit -> [ matrixcontents ] .

    ,               shift and go to state 125
    ]               reduce using rule 61 (minit -> [ matrixcontents ] .)


state 118

    (64) matrixcontents -> expression , matrixcontents .

    ]               reduce using rule 64 (matrixcontents -> expression , matrixcontents .)


state 119

    (65) ifexpr -> IF ( expression ) . instruction
    (66) ifexpr -> IF ( expression ) . instruction ELSE instruction
    (6) instruction -> . expression
    (7) instruction -> . assignment ;
    (8) instruction -> . ifexpr
    (9) instruction -> . loop
    (10) instruction -> . returnexpr ;
    (11) instruction -> . printexpr ;
    (12) instruction -> . breakOrContinue ;
    (13) instruction -> . complexinstruction
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (19) assignment -> . assignable = expression
    (20) assignment -> . assignable ADDASSIGN expression
    (21) assignment -> . assignable SUBASSIGN expression
    (22) assignment -> . assignable MULASSIGN expression
    (23) assignment -> . assignable DIVASSIGN expression
    (65) ifexpr -> . IF ( expression ) instruction
    (66) ifexpr -> . IF ( expression ) instruction ELSE instruction
    (67) loop -> . forloop
    (68) loop -> . whileloop
    (72) returnexpr -> . RETURN expression
    (73) printexpr -> . PRINT printable
    (14) breakOrContinue -> . brk
    (15) breakOrContinue -> . cnt
    (18) complexinstruction -> . { instructions }
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (69) forloop -> . FOR ID = range instruction
    (70) whileloop -> . WHILE ( expression ) instruction
    (16) brk -> . BREAK
    (17) cnt -> . CONTINUE
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    IF              shift and go to state 22
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    {               shift and go to state 29
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    FOR             shift and go to state 39
    WHILE           shift and go to state 40
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 5
    instruction                    shift and go to state 126
    assignment                     shift and go to state 6
    ifexpr                         shift and go to state 7
    loop                           shift and go to state 8
    returnexpr                     shift and go to state 9
    printexpr                      shift and go to state 10
    breakOrContinue                shift and go to state 11
    complexinstruction             shift and go to state 12
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 16
    str                            shift and go to state 17
    special                        shift and go to state 18
    forloop                        shift and go to state 23
    whileloop                      shift and go to state 24
    brk                            shift and go to state 27
    cnt                            shift and go to state 28
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 120

    (75) printable -> expression , printable .

    ;               reduce using rule 75 (printable -> expression , printable .)


state 121

    (25) assignable -> ID [ expression , . expression ]
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 127
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 122

    (69) forloop -> FOR ID = range . instruction
    (6) instruction -> . expression
    (7) instruction -> . assignment ;
    (8) instruction -> . ifexpr
    (9) instruction -> . loop
    (10) instruction -> . returnexpr ;
    (11) instruction -> . printexpr ;
    (12) instruction -> . breakOrContinue ;
    (13) instruction -> . complexinstruction
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (19) assignment -> . assignable = expression
    (20) assignment -> . assignable ADDASSIGN expression
    (21) assignment -> . assignable SUBASSIGN expression
    (22) assignment -> . assignable MULASSIGN expression
    (23) assignment -> . assignable DIVASSIGN expression
    (65) ifexpr -> . IF ( expression ) instruction
    (66) ifexpr -> . IF ( expression ) instruction ELSE instruction
    (67) loop -> . forloop
    (68) loop -> . whileloop
    (72) returnexpr -> . RETURN expression
    (73) printexpr -> . PRINT printable
    (14) breakOrContinue -> . brk
    (15) breakOrContinue -> . cnt
    (18) complexinstruction -> . { instructions }
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (69) forloop -> . FOR ID = range instruction
    (70) whileloop -> . WHILE ( expression ) instruction
    (16) brk -> . BREAK
    (17) cnt -> . CONTINUE
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    IF              shift and go to state 22
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    {               shift and go to state 29
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    FOR             shift and go to state 39
    WHILE           shift and go to state 40
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    instruction                    shift and go to state 128
    expression                     shift and go to state 5
    assignment                     shift and go to state 6
    ifexpr                         shift and go to state 7
    loop                           shift and go to state 8
    returnexpr                     shift and go to state 9
    printexpr                      shift and go to state 10
    breakOrContinue                shift and go to state 11
    complexinstruction             shift and go to state 12
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 16
    str                            shift and go to state 17
    special                        shift and go to state 18
    forloop                        shift and go to state 23
    whileloop                      shift and go to state 24
    brk                            shift and go to state 27
    cnt                            shift and go to state 28
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 123

    (71) range -> expression . : expression
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    :               shift and go to state 129
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60


state 124

    (70) whileloop -> WHILE ( expression ) . instruction
    (6) instruction -> . expression
    (7) instruction -> . assignment ;
    (8) instruction -> . ifexpr
    (9) instruction -> . loop
    (10) instruction -> . returnexpr ;
    (11) instruction -> . printexpr ;
    (12) instruction -> . breakOrContinue ;
    (13) instruction -> . complexinstruction
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (19) assignment -> . assignable = expression
    (20) assignment -> . assignable ADDASSIGN expression
    (21) assignment -> . assignable SUBASSIGN expression
    (22) assignment -> . assignable MULASSIGN expression
    (23) assignment -> . assignable DIVASSIGN expression
    (65) ifexpr -> . IF ( expression ) instruction
    (66) ifexpr -> . IF ( expression ) instruction ELSE instruction
    (67) loop -> . forloop
    (68) loop -> . whileloop
    (72) returnexpr -> . RETURN expression
    (73) printexpr -> . PRINT printable
    (14) breakOrContinue -> . brk
    (15) breakOrContinue -> . cnt
    (18) complexinstruction -> . { instructions }
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (69) forloop -> . FOR ID = range instruction
    (70) whileloop -> . WHILE ( expression ) instruction
    (16) brk -> . BREAK
    (17) cnt -> . CONTINUE
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    IF              shift and go to state 22
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    {               shift and go to state 29
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    FOR             shift and go to state 39
    WHILE           shift and go to state 40
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 5
    instruction                    shift and go to state 130
    assignment                     shift and go to state 6
    ifexpr                         shift and go to state 7
    loop                           shift and go to state 8
    returnexpr                     shift and go to state 9
    printexpr                      shift and go to state 10
    breakOrContinue                shift and go to state 11
    complexinstruction             shift and go to state 12
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 16
    str                            shift and go to state 17
    special                        shift and go to state 18
    forloop                        shift and go to state 23
    whileloop                      shift and go to state 24
    brk                            shift and go to state 27
    cnt                            shift and go to state 28
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 125

    (60) minit -> [ matrixcontents ] , . minit
    (60) minit -> . [ matrixcontents ] , minit
    (61) minit -> . [ matrixcontents ]
    (62) minit -> . matrixcontents
    (63) matrixcontents -> . expression
    (64) matrixcontents -> . expression , matrixcontents
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 73
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    matrixcontents                 shift and go to state 75
    minit                          shift and go to state 131
    expression                     shift and go to state 76
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 126

    (65) ifexpr -> IF ( expression ) instruction .
    (66) ifexpr -> IF ( expression ) instruction . ELSE instruction

    [               reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    (               reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    -               reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    IF              reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    RETURN          reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    PRINT           reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    {               reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    ID              reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    STRING          reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    EYE             reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    ZEROS           reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    ONES            reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    FOR             reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    WHILE           reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    BREAK           reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    CONTINUE        reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    INTNUM          reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    FLOATNUM        reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    $end            reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    }               reduce using rule 65 (ifexpr -> IF ( expression ) instruction .)
    ELSE            shift and go to state 132

  ! ELSE            [ reduce using rule 65 (ifexpr -> IF ( expression ) instruction .) ]


state 127

    (25) assignable -> ID [ expression , expression . ]
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

    ]               shift and go to state 133
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60


state 128

    (69) forloop -> FOR ID = range instruction .

    [               reduce using rule 69 (forloop -> FOR ID = range instruction .)
    (               reduce using rule 69 (forloop -> FOR ID = range instruction .)
    -               reduce using rule 69 (forloop -> FOR ID = range instruction .)
    IF              reduce using rule 69 (forloop -> FOR ID = range instruction .)
    RETURN          reduce using rule 69 (forloop -> FOR ID = range instruction .)
    PRINT           reduce using rule 69 (forloop -> FOR ID = range instruction .)
    {               reduce using rule 69 (forloop -> FOR ID = range instruction .)
    ID              reduce using rule 69 (forloop -> FOR ID = range instruction .)
    STRING          reduce using rule 69 (forloop -> FOR ID = range instruction .)
    EYE             reduce using rule 69 (forloop -> FOR ID = range instruction .)
    ZEROS           reduce using rule 69 (forloop -> FOR ID = range instruction .)
    ONES            reduce using rule 69 (forloop -> FOR ID = range instruction .)
    FOR             reduce using rule 69 (forloop -> FOR ID = range instruction .)
    WHILE           reduce using rule 69 (forloop -> FOR ID = range instruction .)
    BREAK           reduce using rule 69 (forloop -> FOR ID = range instruction .)
    CONTINUE        reduce using rule 69 (forloop -> FOR ID = range instruction .)
    INTNUM          reduce using rule 69 (forloop -> FOR ID = range instruction .)
    FLOATNUM        reduce using rule 69 (forloop -> FOR ID = range instruction .)
    $end            reduce using rule 69 (forloop -> FOR ID = range instruction .)
    }               reduce using rule 69 (forloop -> FOR ID = range instruction .)
    ELSE            reduce using rule 69 (forloop -> FOR ID = range instruction .)


state 129

    (71) range -> expression : . expression
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 134
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 72
    str                            shift and go to state 17
    special                        shift and go to state 18
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 130

    (70) whileloop -> WHILE ( expression ) instruction .

    [               reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    (               reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    -               reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    IF              reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    RETURN          reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    PRINT           reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    {               reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    ID              reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    STRING          reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    EYE             reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    ZEROS           reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    ONES            reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    FOR             reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    WHILE           reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    BREAK           reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    CONTINUE        reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    INTNUM          reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    FLOATNUM        reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    $end            reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    }               reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)
    ELSE            reduce using rule 70 (whileloop -> WHILE ( expression ) instruction .)


state 131

    (60) minit -> [ matrixcontents ] , minit .

    ]               reduce using rule 60 (minit -> [ matrixcontents ] , minit .)


state 132

    (66) ifexpr -> IF ( expression ) instruction ELSE . instruction
    (6) instruction -> . expression
    (7) instruction -> . assignment ;
    (8) instruction -> . ifexpr
    (9) instruction -> . loop
    (10) instruction -> . returnexpr ;
    (11) instruction -> . printexpr ;
    (12) instruction -> . breakOrContinue ;
    (13) instruction -> . complexinstruction
    (26) expression -> . binexp
    (27) expression -> . transpose
    (28) expression -> . num
    (29) expression -> . assignable
    (30) expression -> . str
    (31) expression -> . special ( expression )
    (32) expression -> . [ minit ]
    (33) expression -> . ( expression )
    (34) expression -> . - expression
    (19) assignment -> . assignable = expression
    (20) assignment -> . assignable ADDASSIGN expression
    (21) assignment -> . assignable SUBASSIGN expression
    (22) assignment -> . assignable MULASSIGN expression
    (23) assignment -> . assignable DIVASSIGN expression
    (65) ifexpr -> . IF ( expression ) instruction
    (66) ifexpr -> . IF ( expression ) instruction ELSE instruction
    (67) loop -> . forloop
    (68) loop -> . whileloop
    (72) returnexpr -> . RETURN expression
    (73) printexpr -> . PRINT printable
    (14) breakOrContinue -> . brk
    (15) breakOrContinue -> . cnt
    (18) complexinstruction -> . { instructions }
    (41) binexp -> . mutexp
    (42) binexp -> . compexp
    (36) transpose -> . expression '
    (37) num -> . int
    (38) num -> . float
    (24) assignable -> . ID
    (25) assignable -> . ID [ expression , expression ]
    (35) str -> . STRING
    (57) special -> . EYE
    (58) special -> . ZEROS
    (59) special -> . ONES
    (69) forloop -> . FOR ID = range instruction
    (70) whileloop -> . WHILE ( expression ) instruction
    (16) brk -> . BREAK
    (17) cnt -> . CONTINUE
    (43) mutexp -> . expression + expression
    (44) mutexp -> . expression - expression
    (45) mutexp -> . expression * expression
    (46) mutexp -> . expression / expression
    (47) mutexp -> . expression DOTADD expression
    (48) mutexp -> . expression DOTSUB expression
    (49) mutexp -> . expression DOTMUL expression
    (50) mutexp -> . expression DOTDIV expression
    (51) compexp -> . expression LE expression
    (52) compexp -> . expression GE expression
    (53) compexp -> . expression EQ expression
    (54) compexp -> . expression > expression
    (55) compexp -> . expression < expression
    (56) compexp -> . expression DIFF expression
    (39) int -> . INTNUM
    (40) float -> . FLOATNUM

    [               shift and go to state 20
    (               shift and go to state 19
    -               shift and go to state 21
    IF              shift and go to state 22
    RETURN          shift and go to state 25
    PRINT           shift and go to state 26
    {               shift and go to state 29
    ID              shift and go to state 34
    STRING          shift and go to state 35
    EYE             shift and go to state 36
    ZEROS           shift and go to state 37
    ONES            shift and go to state 38
    FOR             shift and go to state 39
    WHILE           shift and go to state 40
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44

    expression                     shift and go to state 5
    instruction                    shift and go to state 135
    assignment                     shift and go to state 6
    ifexpr                         shift and go to state 7
    loop                           shift and go to state 8
    returnexpr                     shift and go to state 9
    printexpr                      shift and go to state 10
    breakOrContinue                shift and go to state 11
    complexinstruction             shift and go to state 12
    binexp                         shift and go to state 13
    transpose                      shift and go to state 14
    num                            shift and go to state 15
    assignable                     shift and go to state 16
    str                            shift and go to state 17
    special                        shift and go to state 18
    forloop                        shift and go to state 23
    whileloop                      shift and go to state 24
    brk                            shift and go to state 27
    cnt                            shift and go to state 28
    mutexp                         shift and go to state 30
    compexp                        shift and go to state 31
    int                            shift and go to state 32
    float                          shift and go to state 33

state 133

    (25) assignable -> ID [ expression , expression ] .

    =               reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    ADDASSIGN       reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    SUBASSIGN       reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    MULASSIGN       reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    DIVASSIGN       reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    '               reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    +               reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    -               reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    *               reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    /               reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    DOTADD          reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    DOTSUB          reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    DOTMUL          reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    DOTDIV          reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    LE              reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    GE              reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    EQ              reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    >               reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    <               reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    DIFF            reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    [               reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    (               reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    IF              reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    RETURN          reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    PRINT           reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    {               reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    ID              reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    STRING          reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    EYE             reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    ZEROS           reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    ONES            reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    FOR             reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    WHILE           reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    BREAK           reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    CONTINUE        reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    INTNUM          reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    FLOATNUM        reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    $end            reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    }               reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    )               reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    ,               reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    ]               reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    ;               reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    :               reduce using rule 25 (assignable -> ID [ expression , expression ] .)
    ELSE            reduce using rule 25 (assignable -> ID [ expression , expression ] .)


state 134

    (71) range -> expression : expression .
    (36) transpose -> expression . '
    (43) mutexp -> expression . + expression
    (44) mutexp -> expression . - expression
    (45) mutexp -> expression . * expression
    (46) mutexp -> expression . / expression
    (47) mutexp -> expression . DOTADD expression
    (48) mutexp -> expression . DOTSUB expression
    (49) mutexp -> expression . DOTMUL expression
    (50) mutexp -> expression . DOTDIV expression
    (51) compexp -> expression . LE expression
    (52) compexp -> expression . GE expression
    (53) compexp -> expression . EQ expression
    (54) compexp -> expression . > expression
    (55) compexp -> expression . < expression
    (56) compexp -> expression . DIFF expression

  ! shift/reduce conflict for - resolved as shift
    [               reduce using rule 71 (range -> expression : expression .)
    (               reduce using rule 71 (range -> expression : expression .)
    IF              reduce using rule 71 (range -> expression : expression .)
    RETURN          reduce using rule 71 (range -> expression : expression .)
    PRINT           reduce using rule 71 (range -> expression : expression .)
    {               reduce using rule 71 (range -> expression : expression .)
    ID              reduce using rule 71 (range -> expression : expression .)
    STRING          reduce using rule 71 (range -> expression : expression .)
    EYE             reduce using rule 71 (range -> expression : expression .)
    ZEROS           reduce using rule 71 (range -> expression : expression .)
    ONES            reduce using rule 71 (range -> expression : expression .)
    FOR             reduce using rule 71 (range -> expression : expression .)
    WHILE           reduce using rule 71 (range -> expression : expression .)
    BREAK           reduce using rule 71 (range -> expression : expression .)
    CONTINUE        reduce using rule 71 (range -> expression : expression .)
    INTNUM          reduce using rule 71 (range -> expression : expression .)
    FLOATNUM        reduce using rule 71 (range -> expression : expression .)
    '               shift and go to state 46
    +               shift and go to state 47
    -               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    DOTADD          shift and go to state 51
    DOTSUB          shift and go to state 52
    DOTMUL          shift and go to state 53
    DOTDIV          shift and go to state 54
    LE              shift and go to state 55
    GE              shift and go to state 56
    EQ              shift and go to state 57
    >               shift and go to state 58
    <               shift and go to state 59
    DIFF            shift and go to state 60

  ! -               [ reduce using rule 71 (range -> expression : expression .) ]


state 135

    (66) ifexpr -> IF ( expression ) instruction ELSE instruction .

    [               reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    (               reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    -               reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    IF              reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    RETURN          reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    PRINT           reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    {               reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    ID              reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    STRING          reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    EYE             reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    ZEROS           reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    ONES            reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    FOR             reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    WHILE           reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    BREAK           reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    INTNUM          reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    FLOATNUM        reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    $end            reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    }               reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)
    ELSE            reduce using rule 66 (ifexpr -> IF ( expression ) instruction ELSE instruction .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for - in state 5 resolved as shift
WARNING: shift/reduce conflict for [ in state 34 resolved as shift
WARNING: shift/reduce conflict for ' in state 90 resolved as shift
WARNING: shift/reduce conflict for + in state 90 resolved as shift
WARNING: shift/reduce conflict for - in state 90 resolved as shift
WARNING: shift/reduce conflict for * in state 90 resolved as shift
WARNING: shift/reduce conflict for / in state 90 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 90 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 90 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 90 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 90 resolved as shift
WARNING: shift/reduce conflict for LE in state 90 resolved as shift
WARNING: shift/reduce conflict for GE in state 90 resolved as shift
WARNING: shift/reduce conflict for EQ in state 90 resolved as shift
WARNING: shift/reduce conflict for > in state 90 resolved as shift
WARNING: shift/reduce conflict for < in state 90 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 90 resolved as shift
WARNING: shift/reduce conflict for ' in state 91 resolved as shift
WARNING: shift/reduce conflict for + in state 91 resolved as shift
WARNING: shift/reduce conflict for - in state 91 resolved as shift
WARNING: shift/reduce conflict for * in state 91 resolved as shift
WARNING: shift/reduce conflict for / in state 91 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 91 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 91 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 91 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 91 resolved as shift
WARNING: shift/reduce conflict for LE in state 91 resolved as shift
WARNING: shift/reduce conflict for GE in state 91 resolved as shift
WARNING: shift/reduce conflict for EQ in state 91 resolved as shift
WARNING: shift/reduce conflict for > in state 91 resolved as shift
WARNING: shift/reduce conflict for < in state 91 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 91 resolved as shift
WARNING: shift/reduce conflict for ' in state 92 resolved as shift
WARNING: shift/reduce conflict for + in state 92 resolved as shift
WARNING: shift/reduce conflict for - in state 92 resolved as shift
WARNING: shift/reduce conflict for * in state 92 resolved as shift
WARNING: shift/reduce conflict for / in state 92 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 92 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 92 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 92 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 92 resolved as shift
WARNING: shift/reduce conflict for LE in state 92 resolved as shift
WARNING: shift/reduce conflict for GE in state 92 resolved as shift
WARNING: shift/reduce conflict for EQ in state 92 resolved as shift
WARNING: shift/reduce conflict for > in state 92 resolved as shift
WARNING: shift/reduce conflict for < in state 92 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 92 resolved as shift
WARNING: shift/reduce conflict for ' in state 93 resolved as shift
WARNING: shift/reduce conflict for + in state 93 resolved as shift
WARNING: shift/reduce conflict for - in state 93 resolved as shift
WARNING: shift/reduce conflict for * in state 93 resolved as shift
WARNING: shift/reduce conflict for / in state 93 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 93 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 93 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 93 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 93 resolved as shift
WARNING: shift/reduce conflict for LE in state 93 resolved as shift
WARNING: shift/reduce conflict for GE in state 93 resolved as shift
WARNING: shift/reduce conflict for EQ in state 93 resolved as shift
WARNING: shift/reduce conflict for > in state 93 resolved as shift
WARNING: shift/reduce conflict for < in state 93 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 93 resolved as shift
WARNING: shift/reduce conflict for ' in state 94 resolved as shift
WARNING: shift/reduce conflict for + in state 94 resolved as shift
WARNING: shift/reduce conflict for - in state 94 resolved as shift
WARNING: shift/reduce conflict for * in state 94 resolved as shift
WARNING: shift/reduce conflict for / in state 94 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 94 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 94 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 94 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 94 resolved as shift
WARNING: shift/reduce conflict for LE in state 94 resolved as shift
WARNING: shift/reduce conflict for GE in state 94 resolved as shift
WARNING: shift/reduce conflict for EQ in state 94 resolved as shift
WARNING: shift/reduce conflict for > in state 94 resolved as shift
WARNING: shift/reduce conflict for < in state 94 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 94 resolved as shift
WARNING: shift/reduce conflict for ' in state 95 resolved as shift
WARNING: shift/reduce conflict for + in state 95 resolved as shift
WARNING: shift/reduce conflict for - in state 95 resolved as shift
WARNING: shift/reduce conflict for * in state 95 resolved as shift
WARNING: shift/reduce conflict for / in state 95 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 95 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 95 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 95 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 95 resolved as shift
WARNING: shift/reduce conflict for LE in state 95 resolved as shift
WARNING: shift/reduce conflict for GE in state 95 resolved as shift
WARNING: shift/reduce conflict for EQ in state 95 resolved as shift
WARNING: shift/reduce conflict for > in state 95 resolved as shift
WARNING: shift/reduce conflict for < in state 95 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 95 resolved as shift
WARNING: shift/reduce conflict for ' in state 96 resolved as shift
WARNING: shift/reduce conflict for + in state 96 resolved as shift
WARNING: shift/reduce conflict for - in state 96 resolved as shift
WARNING: shift/reduce conflict for * in state 96 resolved as shift
WARNING: shift/reduce conflict for / in state 96 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 96 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 96 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 96 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 96 resolved as shift
WARNING: shift/reduce conflict for LE in state 96 resolved as shift
WARNING: shift/reduce conflict for GE in state 96 resolved as shift
WARNING: shift/reduce conflict for EQ in state 96 resolved as shift
WARNING: shift/reduce conflict for > in state 96 resolved as shift
WARNING: shift/reduce conflict for < in state 96 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 96 resolved as shift
WARNING: shift/reduce conflict for ' in state 97 resolved as shift
WARNING: shift/reduce conflict for + in state 97 resolved as shift
WARNING: shift/reduce conflict for - in state 97 resolved as shift
WARNING: shift/reduce conflict for * in state 97 resolved as shift
WARNING: shift/reduce conflict for / in state 97 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 97 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 97 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 97 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 97 resolved as shift
WARNING: shift/reduce conflict for LE in state 97 resolved as shift
WARNING: shift/reduce conflict for GE in state 97 resolved as shift
WARNING: shift/reduce conflict for EQ in state 97 resolved as shift
WARNING: shift/reduce conflict for > in state 97 resolved as shift
WARNING: shift/reduce conflict for < in state 97 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 97 resolved as shift
WARNING: shift/reduce conflict for ' in state 98 resolved as shift
WARNING: shift/reduce conflict for + in state 98 resolved as shift
WARNING: shift/reduce conflict for - in state 98 resolved as shift
WARNING: shift/reduce conflict for * in state 98 resolved as shift
WARNING: shift/reduce conflict for / in state 98 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 98 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 98 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 98 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 98 resolved as shift
WARNING: shift/reduce conflict for LE in state 98 resolved as shift
WARNING: shift/reduce conflict for GE in state 98 resolved as shift
WARNING: shift/reduce conflict for EQ in state 98 resolved as shift
WARNING: shift/reduce conflict for > in state 98 resolved as shift
WARNING: shift/reduce conflict for < in state 98 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 98 resolved as shift
WARNING: shift/reduce conflict for ' in state 99 resolved as shift
WARNING: shift/reduce conflict for + in state 99 resolved as shift
WARNING: shift/reduce conflict for - in state 99 resolved as shift
WARNING: shift/reduce conflict for * in state 99 resolved as shift
WARNING: shift/reduce conflict for / in state 99 resolved as shift
WARNING: shift/reduce conflict for DOTADD in state 99 resolved as shift
WARNING: shift/reduce conflict for DOTSUB in state 99 resolved as shift
WARNING: shift/reduce conflict for DOTMUL in state 99 resolved as shift
WARNING: shift/reduce conflict for DOTDIV in state 99 resolved as shift
WARNING: shift/reduce conflict for LE in state 99 resolved as shift
WARNING: shift/reduce conflict for GE in state 99 resolved as shift
WARNING: shift/reduce conflict for EQ in state 99 resolved as shift
WARNING: shift/reduce conflict for > in state 99 resolved as shift
WARNING: shift/reduce conflict for < in state 99 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 99 resolved as shift
WARNING: shift/reduce conflict for ] in state 107 resolved as shift
WARNING: shift/reduce conflict for - in state 134 resolved as shift
